import{_ as e,c as o,o as d,N as t}from"./chunks/framework.7812daa2.js";const f=JSON.parse('{"title":"js和node中的模块系统","description":"","frontmatter":{"title":"js和node中的模块系统"},"headers":[],"relativePath":"book/patterns/module-system/module-system-in-js-and-node.md","lastUpdated":1681269310000}'),r={name:"book/patterns/module-system/module-system-in-js-and-node.md"},n=t('<p>不是所有编程语言都存在内置的模块系统，JS很长一段时间是缺乏这个功能的😅。</p><p>在浏览器中，可以将代码拆分为多个部分，然后通过不同的 <code>&lt;script&gt;</code> 标签的方式导入。对于简单的应用这个还行，但是JS开发者一直缺少功能完善的模块系统。</p><p>当JS浏览器应用变得越来越复杂，像 <code>jQuery</code>, <code>Backbone</code>, <code>AngularJS</code> 这样的框架占据浏览器生态时，JS社区提出了几个计划，旨在定义一个可以在JavaScript项目中有效采用的模块系统。最成功的是 <code>AMD(Asynchronous Module Definition)</code>，它因 <a href="http://nodejsdp.link/requirejs" target="_blank" rel="noreferrer">RequireJS</a> 而流行，和之后的 <a href="http://nodejsdp.link/umd" target="_blank" rel="noreferrer">UMD</a>(Universal Module Definition)。</p><p>当Node.js被创建时，它被认为是一种 <code>JS服务端运行时</code>，能直接访问底层文件系统，因此，引入一种不同的模块管理方式是一个独特的机会。主体思想是，不依赖HTML <code>&lt;script&gt;</code> 标签和通过 <code>URLs</code> 的资源访问。相反，选择完全依赖本地文件系统上可用的JavaScript文件。作为其模块系统，Node.js想到了对 <code>CommonJS</code> 规范的实现（也称之为 <a href="http://nodejsdp.link/commonjs" target="_blank" rel="noreferrer">CJS</a>），用于给<code>非浏览器环境</code>的JS提供一个模块系统😎。</p><p>CommonJS自其发布起，就成为了Node.js中统治性的模块系统，同时由于像<a href="http://nodejsdp.link/browserify" target="_blank" rel="noreferrer">Browserify</a> 和 <a href="http://nodejsdp.link/webpack" target="_blank" rel="noreferrer">Webpack</a> 这样的 <code>模块打包器</code>的出现，使其在浏览器端也变得很流行起来。</p><p>🎉在2015年，随着ES2015的发布，终于出现了官方提出的标准的模块系统请求：<code>ESM</code> 或 <code>ES Modules</code>。ESM给JS生态带来了很多创新，这其中，它尝试填补服务端和浏览器端的模块管理的间隙，使其统一。</p><p>ECMAScript 6仅在语法和语义方面定义了ESM的正式规范，并没有提供任何实现细节。Node.js社区和浏览器公司花费了好几年对规范进行了实现。Node.js从 <code>V13.2</code> 封装了对ESM的稳定支持。</p><p>ESM将成为管理浏览器端和服务器端JS模块的绝对事实方式。但仍需要时间从CommonJS向ESM标准进行过度。</p><p>为了提供Node.js中模块相关的综合性概览，本章的第一部分，将在CommonJS的上下文中进行讨论。然后，第二部分将使用ESM。</p><p>本章的目的是，使你能同时适应这2种模块系统😎，但是<code>本书后面的内容，将只使用ESM作为代码演示</code>。这更加面向未来。</p><p>理解CommonJS的特质能帮助我们更好的理解ESM，和ESM的优势。</p><p>2022年09月12日23:53:30</p>',12),s=[n];function c(a,p,l,S,i,_){return d(),o("div",null,s)}const J=e(r,[["render",c]]);export{f as __pageData,J as default};
