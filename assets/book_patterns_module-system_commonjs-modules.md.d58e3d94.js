import{_ as s}from"./chunks/circular-dependencies.c2985898.js";import{_ as o,c as a,o as l,N as n}from"./chunks/framework.7812daa2.js";const p="/awesome-node/assets/depenency-loop.a57756fe.png",m=JSON.parse('{"title":"CommonJS","description":"","frontmatter":{"title":"CommonJS"},"headers":[],"relativePath":"book/patterns/module-system/commonjs-modules.md","lastUpdated":1681457331000}'),e={name:"book/patterns/module-system/commonjs-modules.md"},c=n(`<nav class="table-of-contents"><ul><li><a href="#⭐自己实现一个模块加载器">⭐自己实现一个模块加载器</a></li><li><a href="#定义一个模块">定义一个模块</a></li><li><a href="#🚀-module-exports-vs-exports">🚀 module.exports vs. exports</a></li><li><a href="#require-函数是同步的">require 函数是同步的</a></li><li><a href="#🚀-resolve算法">🚀 resolve算法</a></li><li><a href="#模块缓存">模块缓存</a></li><li><a href="#⭐-循环依赖">⭐ 循环依赖</a></li></ul></nav><p>CommonJS是第一个构建在Node.js中的模块系统。Node.js的 CommonJS实现了CommonJS规范，并添加了一些额外的扩展。</p><div class="tip custom-block"><p class="custom-block-title">📚</p><p>CommonJS规范 2个主要概念：</p><ol><li><code>require</code> 是一个允许你从本地文件系统导入模块的函数</li><li><code>exports</code> &amp; <code>module.exports</code> 是特殊的变量，用于从当前模块导出公开功能</li></ol></div><p>下面看看CommonJS规范的一些细节。</p><h2 id="⭐自己实现一个模块加载器" tabindex="-1">⭐自己实现一个模块加载器 <a class="header-anchor" href="#⭐自己实现一个模块加载器" aria-label="Permalink to &quot;⭐自己实现一个模块加载器&quot;">​</a></h2><p>为了更好理解CommonJS运行原理，我们自己从头开始构建一个类似的系统🚀。下面创建一个函数，模仿Node.js中原版 <code>require()</code> 函数的部分功能。</p><p>先创建一个函数，加载模块内容，将它包裹在一个私有作用域中，然后执行它。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">loadModule</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">require</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wrappedSrc</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    (function (module, exports, require) {</span></span>
<span class="line"><span style="color:#C3E88D;">      </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#A6ACCD;">(filename</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C3E88D;">    })(module, module.exports, require)</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">eval</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">wrappedSrc</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>模块的源代码被包裹到一个函数中，就好像之前的揭露模块模式（<code>revealing module pattern</code>）。区别在于，我们给模块传入了一组变量，即 <code>module</code>, <code>exports</code> &amp; <code>require</code>。特别注意 <code>exports</code> 参数，它其实是 <code>module.exports</code>，之后我们再说这个。</p><p>📚另一个重要细节就是，我们使用了 <code>readFileSync</code> 去读取模块内容。虽然通常不建议使用文件系统api的同步版本，但在这里这样做是有意义的。原因在于，<code>CommonJS中的模块加载是刻意的同步操作</code>。这种方式保证了，如果你导入多个模块，它们（和它们的依赖）能够按照正确的顺序被加载😎。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这里仅仅是一个demo，在真实的应用中，很少会去执行源代码。像 <code>eval()</code> 或 <a href="https://nodeschool.io/zh-cn/" target="_blank" rel="noreferrer">vm</a> 模块很容易被错误使用，导致注入攻击，使用时应该极其小心，并且不要将它们同时一起使用。</p></div><p>🚀我们现在实现 <code>require()</code> 函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">moduleName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Require invoked for module: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">moduleName</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">moduleName</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 📌 1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">               </span><span style="color:#676E95;font-style:italic;">// 📌 2</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 模块元数据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">                       </span><span style="color:#676E95;font-style:italic;">// 📌 3</span></span>
<span class="line"><span style="color:#F07178;">    exports</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">id</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 更新缓存</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cache</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">module</span><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// 📌 4</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加载模块</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">loadModule</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">module,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">require</span><span style="color:#F07178;">)       </span><span style="color:#676E95;font-style:italic;">// 📌 5</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 返回导出的变量</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;">                 </span><span style="color:#676E95;font-style:italic;">// 📌 6</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 函数对象上添加额外的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cache </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">moduleName</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 依据 moduleName 解析完整模块id</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面函数模拟了Node.js原版 <code>require()</code> 函数的行为，用于加载模块。当然，这只是用作教学目的，并不能精确和完整的反应真实的 <code>require()</code> 函数的内部行为😁，但有助于帮助理解Node.js模块系统的内部，包括模块是如何定义和加载的。</p><p>上面标记📌注解：</p><ol><li>模块名作为输入，我们要做的第一件事是解析该模块的完整路径，我们称之为 <code>id</code>。这个任务委托给了 <code>require.resolve()</code>，它实现了一种特殊的解析算法（之后会细讲这个😇）</li><li>如果模块已经被加载过了，则它可在缓存中找到。直接返回缓存中的内容</li><li>如果模块之前没有被加载过，我们给模块的第一次加载设置环境。即，我们创建一个 <code>module</code> 对象，包含 <code>exports</code> 属性，它初始值是一个空对象字面量。<code>该对象将由模块的代码填充，以导出其公共API。</code></li><li>在第一次加载后， <code>module</code> 对象会被缓存起来</li><li>模块源码从它的文件中被读取，并被执行，正如我们先前看到的一样。我们给模块提供了我们刚创建的 <code>module</code> 对象和 <code>require()</code> 函数的引用。模块通过操控或替代 <code>module.exports</code> 对象导出其公共API</li><li>最后，表示该模块公开API的 <code>module.exports</code> 的内容返回给调用者（<code>caller</code>）</li></ol><p>可以看出，Node.js模块系统也没有什么黑魔法，诀窍在于我们围绕模块源代码创建的包装器和运行模块的人工环境。😎</p><h2 id="定义一个模块" tabindex="-1">定义一个模块 <a class="header-anchor" href="#定义一个模块" aria-label="Permalink to &quot;定义一个模块&quot;">​</a></h2><p>通过查看我们自定义的 <code>require()</code> 工作原理，我们现在能理解如何定义一个模块了。</p><p>🌰：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 加载另一个依赖</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dependency </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./anotherModule</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 私有函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Well done </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">dependency</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 导出的公开API</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>记住一个基本法则：模块中的一切都是私有的，除非将其赋值给 <code>module.exports</code> 变量。当模块通过 <code>require()</code>加载时，这个变量的内容会被缓存起来，并被返回。</p></div><h2 id="🚀-module-exports-vs-exports" tabindex="-1">🚀 module.exports vs. exports <a class="header-anchor" href="#🚀-module-exports-vs-exports" aria-label="Permalink to &quot;🚀 module.exports vs. exports&quot;">​</a></h2><p>对于很多不熟悉Node.js的小伙伴，通常存在一个这样的困惑：<strong>是该使用 <code>module.exports</code> 还是 <code>exports</code> 导出公有API呢？</strong> 我们上面自定义的 <code>require()</code> 函数应该能再次解答这个疑惑。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>exports</code> 变量仅仅是 <code>module.exports</code> 初始值的一个引用。我们已经看到，这样的值本质上仅仅是模块加载前的一个简单对象字面量。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">require</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// exports 一般是我们模块中使用的</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">module,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">module.exports,</span><span style="color:#A6ACCD;"> require) </span><span style="color:#676E95;font-style:italic;">// 实际传入的是 module.exports 作为它的初始值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 而 module对象为</span></span>
<span class="line"><span style="color:#89DDFF;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">exports</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>可以看出 <code>exports</code> 参数一开始传入的就是 <code>module.exports</code></p></div><p>这意味着，我们可以通过 <code>exports</code> 变量向对象引用添加新的属性，比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#82AAFF;">hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 译者注：等价于</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#82AAFF;">hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>👩‍🏫 而给 <code>exports</code> 变量重新赋值没有任何效果，因为它不会改变 <code>module.exports</code> 的内容。它只会对变量自身进行重赋值。下面代码因此是错误的❌：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#676E95;font-style:italic;">// ❌ 重赋值 导致 exports指向了别的对象地址</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 而最终向外暴露的API是以 module.exports 对象为准</span></span>
<span class="line"><span style="color:#89DDFF;">exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>如果你想导出一些除了对象字面量之外的东西，比如函数，实例或字符串什么的，我们必须对 <code>module.exports</code> 重新赋值，比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ✅</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>译者注：了解两者区别，可看下面一篇文章，简洁明了</p><ul><li><a href="https://blog.csdn.net/louxinuo/article/details/119058495" target="_blank" rel="noreferrer">exports和module.exports的区别 - @csdn</a></li></ul></div><h2 id="require-函数是同步的" tabindex="-1"><code>require</code> 函数是同步的 <a class="header-anchor" href="#require-函数是同步的" aria-label="Permalink to &quot;\`require\` 函数是同步的&quot;">​</a></h2><p>我们需要注意的一个非常重要细节就是，我们自定义的 <code>require()</code> 函数是 <code>同步的</code>。实际上，它使用简单直接的风格返回了模块内容，并且不需要回调。<strong>这对Node.js原本的 <code>require()</code> 函数也是一样的🎉</strong>。这导致的结果就是，<code>任何对 module.exports 的赋值都必须也是同步的。</code></p><p>🌰，因此下面代码是不正确的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>require()</code> 这种同步的天性对定义模块的方式产生了重要的影响，因为它限制我们在定义模块时大多数使用同步代码。这是核心Node.js库提供同步api作为大多数异步api的替代方案的最重要原因之一。</p></div><p>如果我们需要某个模块的一些异步初始化步骤，我们总是可以定义和导出一个未初始化的模块，它将在稍后进行异步初始化。但是，这种方法的问题是，使用<code>require()</code>加载这样的模块并不能保证它可以被使用😅。第11章我们会详细分析这个问题，并给出几种优雅解决这个问题的模式。</p><p>出于好奇，你可能想知道，在早期，Node.js曾经有一个异步版本的require()，但它很快就被删除了，因为它使一个实际上只在初始化时使用的功能过于复杂，而且异步I/O带来的复杂性大于优点😂。</p><h2 id="🚀-resolve算法" tabindex="-1">🚀 resolve算法 <a class="header-anchor" href="#🚀-resolve算法" aria-label="Permalink to &quot;🚀 resolve算法&quot;">​</a></h2><p>术语<code>依赖地狱</code>描述了这样一种情况：一个程序的两个或多个依赖项轮流依赖于一个共享依赖项，但需要不同的不兼容版本。Node.js根据加载模块的位置加载不同版本的模块，从而很好地解决了这个问题。该特性的所有优点都在于Node.js包管理器(如npm或yarn)组织应用程序依赖关系的方式，以及<code>require()</code>函数中使用的解析算法。</p><p>我们先快速预览一下这个算法。正如先前所见，<code>resolve()</code> 函数接收一个模块名（<code>moduleName</code>）作为输入，然后返回完整的模块路径。该路径用于加载它的代码和作为模块唯一标识符。解析算法可以划分为下面3个主要分支：</p><ol><li><strong>文件模块</strong>： 如果 <code>moduleName</code> 以 <code>/</code> 开头，则它表示一个<code>绝对路径</code>，直接返回即可。如果以 <code>./</code> 开头，则 <code>moduleName</code> 表示一个<code>相对路径</code>，这是从所需模块的目录开始计算的。</li><li><strong>核心模块</strong>： 如果模块没有 <code>/</code> 或 <code>./</code> 前缀，算法会先尝试从Node.js核心模块开始搜索</li><li><strong>包模块</strong>：如果 <code>moduleName</code> 不是核心模块，搜索继续，先从请求模块所在的 <code>node_modules</code> 中搜索，如果还没找到，则再在其父 <code>node_modules</code> 中查找，直到到达项目根目录为止。</li></ol><p>对于文件和包模块，文件和目录都可以匹配 <code>moduleName</code>。特别是，算法会匹配下面内容：</p><ul><li><code>&lt;moduleName&gt;.js </code>直接匹配文件</li><li><code>&lt;moduleName&gt;/index.js</code> 目录下的 <code>index.js</code></li><li><code>&lt;moduleName/package.json&gt;</code> 中 <code>main</code> 属性指定的 <code>directory/file</code> 包模块</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>该算法完整和正式的文档可查看：<a href="https://nodejs.org/api/modules.html#modules_all_together" target="_blank" rel="noreferrer">Node modules - resolve</a></p></div><p><code>node_modules</code> 目录是包管理器（<code>npm | yarn | pnpm</code>） 安装依赖生成的目录。正如先前所讲，每个包都有自己私有依赖。</p><p>🌰下面目录结构：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">myApp</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo.js</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">depA</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">depB</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bar.js</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">depA</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">depC</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foobar.js</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">depA</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index,js</span></span></code></pre></div><p><code>myApp</code> &amp; <code>depB</code> &amp; <code>depC</code> 都依赖 <code>depA</code>。但是他们都有自己该依赖的私有版本。遵循下面解析算法规则，使用 <code>require(&#39;depA&#39;)</code> 会依据需要它的模块加载不同文件，比如：</p><ul><li>在 <code>/myApp/foo.js</code> 中调用 <code>require(&#39;depA&#39;)</code>，将加载 <code>/myApp/node_modules/depA/index.js</code></li><li>在 <code>/myApp/node_modules/depB/bar.js</code> 中调用 <code>require(&#39;depA&#39;)</code>，将加载 <code>/myApp/node_modules/depB/node_modules/depA/index.js</code></li><li>在 <code>/myApp/node_modules/depC/foobar.js</code> 中调用 <code>require(&#39;depA&#39;)</code>，将加载 <code>/myApp/node_modules/depC/node_modules/depA/index.js</code></li></ul><p>这个解析算法是Node.js强大的依赖管理能力的核心部分，它使成千上百的依赖包不会出现冲突和版本兼容性问题。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当调用<code>require()</code>时，解析算法对我们来讲是透明无感的，我们直接使用即可。但是，如果需要，任何模块仍然可以通过调用<code>require.resolve()</code>直接使用它。😎</p></div><h2 id="模块缓存" tabindex="-1">模块缓存 <a class="header-anchor" href="#模块缓存" aria-label="Permalink to &quot;模块缓存&quot;">​</a></h2><p>每个模块只有第一次被 <code>require</code> 时才会加载和执行，后续的 <code>require()</code> 都直接返回缓存版本。上面的自制版本 <code>require()</code> 应该很清晰看到这一点。缓存对性能很重要，但它也有一些重要的功能含义：</p><ul><li>它使得在模块依赖中存在循环成为可能</li><li>它在某种程度上保证，当从给定包中需要相同的模块时，总是返回相同的实例</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>模块缓存通过 <code>require.cache</code> 变量暴露，因此如果需要的话，我们可以直接访问它🤩。一个常见的用例是通过删除<code>require.cache</code>中的键来使任何缓存模块失效。这种做法在<code>测试期间</code>可能很有用，但如果在正常情况下使用，则非常危险。</p></div><h2 id="⭐-循环依赖" tabindex="-1">⭐ 循环依赖 <a class="header-anchor" href="#⭐-循环依赖" aria-label="Permalink to &quot;⭐ 循环依赖&quot;">​</a></h2><p>很多人认为循环依赖是一种内在的设计问题，但是它在实际项目中是确确实实可能存在的，因此了解它在CommonJS中是如何运作的是很有用的。如果再看看我们自制的 <code>require()</code> 函数，我们便能管中窥豹，了解它是如何工作的，以及它的缺陷是什么。</p><p>我们先通过下面一个示例展示循环依赖在CommonJS中的行为。</p><p><img src="`+s+`" alt="circular-dependencies"></p><p>模块 <code>main.js</code> 需要 <code>a.js</code> &amp; <code>b.js</code>。而 <code>a.js</code> 又需要 <code>b.js</code>。同时 <code>b.js</code> 又依赖 <code>a.js</code>。很明显模块 <code>a &amp; b</code> 存在循环依赖。先看一下这2个模块：</p><p>模块 <code>a.js</code> ：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">loaded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  b</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">loaded</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 覆盖先前的export</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>模块 <code>b.js</code> ：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">loaded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  a</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">loaded</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>模块 <code>main.js</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a -&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b -&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span></span></code></pre></div><p>如果我们运行 <code>main.js</code>，打印结果如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#C3E88D;">loaded</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">loaded</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C3E88D;">loaded</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">b</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">loaded</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C3E88D;">loaded</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>👩‍🏫 这个结果揭露了CommonJS中循环依赖的缺陷，即，应用程序的不同部分对模块<code>a.js</code>和模块<code>b.js</code>导出的内容有不同的视野，<code>这取决于这些依赖项的加载顺序。</code>当这两个模块从<code>main.js</code>模块中被加载时，它们就会被完全初始化，而<code>a.js</code>模块在从<code>b.js</code>模块中加载时将是不完整的。特别是，它的状态将是在加载<code>b.js</code>时达到的状态。</p><p>为了更详细地了解幕后发生了什么，让我们一步一步地分析不同模块是如何被解释的，以及它们的局部作用域是如何变化的: <img src="`+p+'" alt="depenency-loop"></p><p>加载步骤如下：</p><ol><li>整个过程从 <code>main.js</code> 开始，它会立即加载 <code>a.js</code></li><li>模块 <code>a.js</code> 做的第一件事就是导出一个叫 <code>loaded</code> 的值，它的值为 <code>false</code></li><li>此时，模块 <code>a.js</code> 又去加载模块 <code>b.js</code></li><li>和 <code>a.js</code> 一样，模块 <code>b.js</code> 做的第一件事也是导出 <code>loaded = false</code></li><li>现在，模块 <code>b.js</code> 又去加载模块 <code>a.js</code> （<code>形成循环</code>）</li><li>因为 <code>a.js</code> 已经被遍历，它当前导出的值立即被拷贝到模块 <code>b.js</code> 作用域中</li><li>模块 <code>b.js</code> 最终将 <code>loaded</code> 值更改为 <code>true</code></li><li>现在 <code>b.js</code> 已经完全执行，控制权返回给 <code>a.js</code>，在它自己的作用域中保存模块<code>b.js</code>当前状态的副本</li><li>模块 <code>a.js</code> 最后一步就是将 <code>loaded</code> 值设置为 <code>true</code></li><li>现在 <code>a.js</code> 已经完全执行，控制权返回给 <code>main.js</code>，在它自己内部作用域中保存模块<code>a.js</code>当前状态的副本</li><li><code>main.js</code> 加载 <code>b.js</code>，会立即从 <code>缓存</code> 中进行加载</li><li>模块 <code>b.js</code> 当前状态会立即拷贝到模块 <code>main.js</code> 的作用域中，得到模块最终的完整状态</li></ol><p>正如之前所说，这里的问题是，<code>b.js</code> 只有模块 <code>a.js</code> 部分视野，并且这部分视野随着模块 <code>b.js</code> 被 <code>main.js</code> 加载而被传播。**这种行为应该会引发一种直觉，如果我们交换main.js中需要这两个模块的顺序，这种直觉可以得到证实。**如果你真这样做了，你会看到这一次<code>a.js</code>模块将接收到<code>b.js</code>的不完整版本。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们现在明白，如果我们失去对首先加载哪个模块的控制，这可能会变得相当模糊，如果项目足够大，这种情况很容易发生。</p></div><p>之后我们会看到ESM如何更有效的处理循环依赖的问题😎。同时，如果你使用CommonJS，也应该注意这种行为，以及它对项目可能产生的影响。</p><p>下面一节，我们讨论Node.js中定义模块的几种模式。</p><p>2022年09月28日21:31:59</p>',79),t=[c];function r(y,D,d,F,i,C){return l(),a("div",null,t)}const h=o(e,[["render",r]]);export{m as __pageData,h as default};
