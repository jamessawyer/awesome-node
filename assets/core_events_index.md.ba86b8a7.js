import{_ as e,c as t,o,b as r}from"./app.3718deac.js";const f=JSON.parse('{"title":"EventEmitter","description":"","frontmatter":{"title":"EventEmitter"},"headers":[{"level":2,"title":"文章","slug":"文章","link":"#文章","children":[]}],"relativePath":"core/events/index.md","lastUpdated":1677639684000}'),n={name:"core/events/index.md"},i=r('<p>整个Node.js的异步通信都是通过 <a href="https://nodejs.org/api/events.html" target="_blank" rel="noreferrer">EventEmitter</a> 来实现的，了解这种模式对于理解Node的事件系统非常的重要。它本身的也是很简单的一个类。</p><h2 id="文章" tabindex="-1">文章 <a class="header-anchor" href="#文章" aria-hidden="true">#</a></h2><ol><li><a href="https://www.freecodecamp.org/news/how-to-code-your-own-event-emitter-in-node-js-a-step-by-step-guide-e13b7e7908e1/" target="_blank" rel="noreferrer">How to code your own event emitter in Node.js: a step-by-step guide - @freecodecamp</a><ul><li>如何一步一步实现EventEmitter的核心功能 + 图解各个属性的含义😎</li><li><code>on | addEventListener</code> 方法</li><li><code>off | removeEventListener</code> 方法</li><li><code>once</code> 方法，本文中的实现是有问题的🚨，具体实现可以参考 <a href="https://github.com/nodejs/node/blob/v19.2.0/lib/events.js#L632" target="_blank" rel="noreferrer">events once源码</a></li><li><code>emit</code> 方法</li><li><code>rawListeners</code> 方法</li><li><code>listenerCount</code> 获取某个事件注册的监听器数量</li></ul></li></ol>',3),a=[i];function d(s,l,c,_,p,h){return o(),t("div",null,a)}const v=e(n,[["render",d]]);export{f as __pageData,v as default};
