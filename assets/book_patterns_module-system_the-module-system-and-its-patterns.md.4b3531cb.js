import{_ as s,c as n,o as a,N as l}from"./chunks/framework.7812daa2.js";const A=JSON.parse('{"title":"模块系统和模式","description":"","frontmatter":{"title":"模块系统和模式"},"headers":[],"relativePath":"book/patterns/module-system/the-module-system-and-its-patterns.md","lastUpdated":1681457331000}'),p={name:"book/patterns/module-system/the-module-system-and-its-patterns.md"},o=l(`<p>正如前面所说，模块是构建大型应用以及通过导出和不导出方式暴露和隐藏信息的核心。</p><p>在了解CommonJS之前，我们先讨论一种帮助隐藏信息，用于构建简单模块系统的通用模式 - <code>revealing module pattern</code>(揭露模块模式)。</p><h2 id="the-revealing-module-pattern" tabindex="-1">The revealing module pattern <a class="header-anchor" href="#the-revealing-module-pattern" aria-label="Permalink to &quot;The revealing module pattern&quot;">​</a></h2><p>浏览器中的JS最大问题就是缺少命名空间。每个脚本都运行在全局作用于。而应用内部代码或第三方依赖暴露出来的功能会污染全局作用域😅。这是极其有害的。假设，有个第三方库实例化一个全局变量 <code>utils</code>，如果应用代码自身不小心改变或覆盖了该 <code>utils</code>，这就可能导致不可预知的错误。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>简而言之，依赖全局作用域是一件极其危险的事。尤其是当代码越来越复杂，依赖越来越多时。</p></div><p>一种解决这类问题比较流行的技术称之为 <code>揭露模块模式</code>，看起来如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// IIFE</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 私有信息</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">privateFoo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">privateBar</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 暴露给外界的信息</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">exported</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">publicFoo</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">publicBar</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">exported</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myModule)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(myModule</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">privateFoo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> myModule</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">privateBar)</span></span></code></pre></div><p>打印结果：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">publicFoo:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Function: publicFoo</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">publicBar:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Function: publicBar</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">undefined</span></span></code></pre></div><p>这种模式利用自调用函数。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>IIFE</code>(Immediately Invoked Function Expression) 用于创建私有作用域，只导出公共部分。</p><p>在JS中，函数内创建的变量外部作用域是无法访问的。函数可以使用 <code>return</code> 语句选择性的向外部作用域暴露信息。</p><p>📚这个模式本质上就是隐藏私有信息，只暴露公开API。</p></div><p>这种思想正是CommonJS模块系统的基石😎。</p><p>2022年09月25日12:26:08</p>`,13),e=[o];function t(c,r,y,F,i,D){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{A as __pageData,C as default};
