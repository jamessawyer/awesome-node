import{_ as s}from"./chunks/circular-dependencies.c2985898.js";import{_ as l,c as n,o as a,b as o}from"./app.62499b38.js";const p="/awesome-node/assets/parsing-cyclic-dep.f2c2dc31.png",e="/awesome-node/assets/linear-graph.890884c9.png",c="/awesome-node/assets/instantiation.24f66e7d.png",t="/awesome-node/assets/linking.cf3c809f.png",r="/awesome-node/assets/evaluation.2fcfa9ad.png",E=JSON.parse('{"title":"ESM","description":"","frontmatter":{"title":"ESM"},"headers":[{"level":2,"title":"在Node.js中使用ESM","slug":"在node-js中使用esm","link":"#在node-js中使用esm","children":[]},{"level":2,"title":"有名导出和导入","slug":"有名导出和导入","link":"#有名导出和导入","children":[]},{"level":2,"title":"默认导出和导入","slug":"默认导出和导入","link":"#默认导出和导入","children":[]},{"level":2,"title":"混合导出","slug":"混合导出","link":"#混合导出","children":[]},{"level":2,"title":"⭐ 模块标识符","slug":"⭐-模块标识符","link":"#⭐-模块标识符","children":[]},{"level":2,"title":"异步导入","slug":"异步导入","link":"#异步导入","children":[]},{"level":2,"title":"⭐ 深入模块加载","slug":"⭐-深入模块加载","link":"#⭐-深入模块加载","children":[{"level":3,"title":"加载阶段（Loading phases）","slug":"加载阶段-loading-phases","link":"#加载阶段-loading-phases","children":[]},{"level":3,"title":"只读动态绑定","slug":"只读动态绑定","link":"#只读动态绑定","children":[]},{"level":3,"title":"循环依赖解析","slug":"循环依赖解析","link":"#循环依赖解析","children":[]}]},{"level":2,"title":"修改其它模块","slug":"修改其它模块","link":"#修改其它模块","children":[]}],"relativePath":"book/patterns/module-system/esm.md","lastUpdated":1676358047000}'),y={name:"book/patterns/module-system/esm.md"},D=o(`<nav class="table-of-contents"><ul><li><a href="#在node-js中使用esm">在Node.js中使用ESM</a></li><li><a href="#有名导出和导入">有名导出和导入</a></li><li><a href="#默认导出和导入">默认导出和导入</a></li><li><a href="#混合导出">混合导出</a></li><li><a href="#⭐-模块标识符">⭐ 模块标识符</a></li><li><a href="#异步导入">异步导入</a></li><li><a href="#⭐-深入模块加载">⭐ 深入模块加载</a><ul><li><a href="#加载阶段-loading-phases">加载阶段（Loading phases）</a></li><li><a href="#只读动态绑定">只读动态绑定</a></li><li><a href="#循环依赖解析">循环依赖解析</a></li></ul></li><li><a href="#修改其它模块">修改其它模块</a></li></ul></nav><p>ESM作为ES2015规范的一部分被引入，它旨在为JS提供一个适用于不同运行环境的官方模块系统。</p><ul><li>ESM规范尝试保留CommonJS，AMD这些已有模块系统的优点</li><li>其语法简洁紧凑</li><li>支持循环依赖😎</li><li>并可能<code>异步的</code>加载模块</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ESM和CommonJS之间最大的区别在于：</p><ol><li>ESM是 <strong>静态的（<code>static</code>）</strong>，意味着，导入需要放在每个模块最顶层，不能放在控制流语句中（<code>if | while</code> 等）；</li><li>导入模块的名字不能使用表达式在运行时动态生成，只能是常量字符串</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// ❌ 不能放在控制流语句中</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (isLoad) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xx</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">esm</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ❌ 不能使用表达式在运行时动态生成</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MODULE_NAME </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">XX</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">MODULE_NAME</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">_YY</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some-esm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></div><p>例如，下面代码在使用ESM时是不合法的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>而在CommonJS中，这样写是完全没有问题的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requiree</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>初看之下，这看起来是ESM一种不必要的限制，但实际上，使用静态导入开启了很多有趣的场景，而这对于CommonJS动态的特性是不可能的。比如</p><ul><li>静态导入允许依赖树的静态分析，这使得死代码消除（tree-shaking） 优化成为了可能</li><li>等等</li></ul><h2 id="在node-js中使用esm" tabindex="-1">在Node.js中使用ESM <a class="header-anchor" href="#在node-js中使用esm" aria-hidden="true">#</a></h2><p>Node.js默认 <code>.js</code> 文件使用CommonJS语法。因此，如果在 <code>.js</code> 文件中使用ESM语法，解释器会直接抛出错误。</p><p>有几种方式告诉Node.js翻译器，给定的模块是ESM，不是CommonJS:</p><ol><li><p>将模块文件后缀更改为 <code>.mjs</code></p></li><li><p>在最近的父 <code>package.json</code> 中添加一个 <code>type</code> 字段，值为 <code>&quot;module&quot;</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">dependency</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本书后面会使用 <code>.js</code> 文件，在 <code>package.json</code> 中添加 <code>&quot;type&quot;: &quot;module&quot;</code> 的方式。</p></div><h2 id="有名导出和导入" tabindex="-1">有名导出和导入 <a class="header-anchor" href="#有名导出和导入" aria-hidden="true">#</a></h2><p>📚 ESM允许我们通过 <code>export</code> 关键词从模块中导出功能。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意，ESM使用 <code>export</code> 单数形式，而CommonJS使用 <code>exports | module.exports</code> 复数形式。</p></div><p>在ESM中，所有功能<code>默认私有</code>，只有导出的部分才对其它模块可见😎。</p><p>🌰 <code>logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 导出一个函数，名为 \`log\`</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 导出一个常量，名为 \`DEFAULT_LEVEL\`</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> DEFAULT_LEVEL </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 导出一个对象，名为 \`LEVELS\`</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> LEVELS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">error</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">debug</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">warn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">verbose</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 导出一个类，名为 \`Logger\`</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">] </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>📚 如果我们想从别的模块中导入实体，可以使用 <code>import</code> 关键词。这个语法相当灵活，它允许我们导入一个或多个实体，甚至重命名导入😎。</p><p>🌰</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> loggerModule </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(loggerModule)</span></span>
<span class="line"></span></code></pre></div><p>1️⃣ 这里使用 <code>*</code> 语法（也称之为 <strong><code>namespace import</code></strong>） 导入模块所有成员，然后将其赋值给本地变量 <code>loggerModule</code>。上面输出如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Module</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">DEFAULT_LEVEL:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">LEVELS:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">error:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">debug:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warn:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">data:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">verbose:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Logger:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">class Logger</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">log:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Function: log</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如我们所见，模块中所有导出的实体都可通过 <code>loggerModule</code> 命名空间访问到。比如，可使用 <code>loggerModule.log</code> 引用 <code>log()</code> 函数。</p><div class="warning custom-block"><p class="custom-block-title">🚨</p><p>不同于CommonJS，ESM必须指定导入模块的<code>文件扩展</code>。使用CommonJS，我们可以使用 <code>./logger</code> 或者 <code>./logger.js</code>；而ESM，必须带上文件扩展，使用 <code>./logger.js</code>。</p></div><p>2️⃣ 不想导入所有，导入部分实体方式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>导入多个：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Logger</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Logger</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DEFAULT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>3️⃣ 当使用这种类型的导入语句，实体被导入到当前作用域，有可能存在命名冲突。下面代码。会报错：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// ❌ SyntaxError: Identifier &#39;log&#39; has already been declared</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> log </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log</span></span>
<span class="line"></span></code></pre></div><p>解决办法是使用 <code>as</code> 关键词对导入实体进行重命名：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">log2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> log </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message from log</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">log2</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message from log2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>这种方式对解决因导入同名实体而导致的冲突十分有用，在模块之外改变原有名字都掌握在用户手中。</p><h2 id="默认导出和导入" tabindex="-1">默认导出和导入 <a class="header-anchor" href="#默认导出和导入" aria-hidden="true">#</a></h2><p>CommonJS很常用的一个能力是，通过给 <code>module.exports</code> 赋值的方式导出<code>单一未命名</code>实体。这种方式很便利，因为它鼓励模块开发者遵循单一职责原则，一个模块只暴露一个清晰的接口。ESM可以使用 <code>default export</code> 的方式达到同样的目的。默认导出使用 <code>export default</code> 关键词：</p><p>🌰 <code>Logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">] </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>📚 这种情况下，名字 <code>Logger</code> 会被忽略，导出的实体会被注册在 <code>default</code> 名字下。导出的名字通过特殊的方式被处理，可以通过下面方式导入：</p><p><code>main.js</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyLogger </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./Logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyLogger</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>和有名导出的差别在于，因为默认导出被认为是无名的（<code>unnamed</code>），因此我们在导入的同时给它赋值一个本地变量。本例中，我们可以使用任何名字替换 <code>MyLogger</code> 都可以。这和CommonJS模块很类似。</p><div class="tip custom-block"><p class="custom-block-title">📚</p><p>在内部，默认导出相当于使用 <code>default</code> 作为名字进行导出。</p></div><p>我们可以通过下面方式，验证这个说法：</p><p>🌰 <code>showDefault.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> loggerModule </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(loggerModule)</span></span>
<span class="line"></span></code></pre></div><p>当执行后，打印结果：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Module</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">default:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Function: Logger</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span></code></pre></div><p>🚨 注意，我们不能显式的导入default实体。实际上，下面方式会失败：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#676E95;font-style:italic;">// ❌ SyntaxError: Unexpected reserved word error</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>这是因为 <code>default</code> 关键词不能用作是变量名。它作为对象特性是合法的。因此上面的例子中，我们使用 <code>loggerModule.default</code> 是合法的，但是直接使用 <code>default</code> 是不允许的。</p><h2 id="混合导出" tabindex="-1">混合导出 <a class="header-anchor" href="#混合导出" aria-hidden="true">#</a></h2><p>ESM中可以同时导出有名导出和默认导出。</p><p>🌰 <code>logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 默认导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">msg</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 有名导出</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">info: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面的 <code>info</code> 函数内部调用了默认导出的 <code>log</code> 函数，这里不能使用 <code>default()</code> ，否则会抛出错误 <code>syntax error(Unexpected token default)</code>。</p><p>📚同时导入默认导出和有名导出：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> mylog</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">info</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>默认导出和有名导出的主要几个差异：</p><ol><li>有名导出是显式的。通过已确定的名字使IDEs支持自动导入，自动完成和重构😎。比如，如果我们输入 <code>writeFileSync</code>，编辑器可能会自动在当前文件的开头添加 <code>import { writeFileSync } from &#39;fs&#39;</code>。相比之下，默认导出使事情变得复杂，因为不同文件中，默认导出被导入时，可能使用不同的名字；</li><li>默认导出是一种方便的机制，用于交流模块中最重要的功能。同时，从用户的角度，使用默认导出更加的便利，不需要知道具体的名字；</li><li>某些情况下，默认导出可能使tree shaking 更加困难😔。例如，一个模块可能只提供一个默认导出，其余功能则以对象属性的形式。当我们导入这个默认对象，大多数模块打包器会认为整个对象都在被使用，因此它们无法从导出的功能中删除任何未使用的代码。</li></ol><div class="tip custom-block"><p class="custom-block-title">💡</p><p>基于上面的原因，坚持使用有名导出被认为是一种最佳实践🎉，特别是当模块需要暴露多个功能时，只有当模块只导出一个清晰且单一功能时，才考虑使用默认导出。</p><p>当然这并不是一个强制的规则，对上面建议存在很多例外。比如，所有Node.js核心模块同时存在默认导出和很多有名导出。同样，React也使用混合导出。</p><p>根据你的模块功能以及用户体验综合考虑，选择最适合的导出方式。</p></div><h2 id="⭐-模块标识符" tabindex="-1">⭐ 模块标识符 <a class="header-anchor" href="#⭐-模块标识符" aria-hidden="true">#</a></h2><p><code>Module identifiers</code>（也称之为 <code>module specifiers</code>） 是在 <code>import</code> 语句中用于确定加载模块位置的不同类型的值。</p><p>目前我们只看到过相对路径，但存在其它可能和一些细微的差别。下面列举出所有的可能性：</p><ol><li><code>相对限定符</code> 比如 <code>./logger.js</code> 或 <code>../logger.js</code>。表示相对于导入文件位置的路径。</li><li><code>绝对限定符</code> 比如 <code>file:///opt/nodejs/config.js</code>。表示直接显式的完整路径。<code>注意，这是ESM引用模块绝对路径的唯一方法</code>，使用 <code>/</code> 或者 <code>//</code> 前缀是行不通的。这一点和CommonJS存在巨大的差别🤩。</li><li><code>裸限定</code> 比如 <code>fastify</code>,<code>http</code>。它们表示 <code>node_modules</code> 文件夹中的模块，通过都过包管理工具（npm|pnpm|yarn），或者是Node.js核心模块。</li><li><code>深度导入限定符</code> 比如 <code>fastify/lib/logger.js</code>，表示 <code>node_modules</code> 中的某个包的某个路径（这里是 <code>fastify</code>）</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>🎉 在浏览器环境中，可以直接通过指定模块URL的方式导入模块，比如，<code>https://unpkg.com/lodash</code>。这个功能在Node.js中是不支持的。</p></div><h2 id="异步导入" tabindex="-1">异步导入 <a class="header-anchor" href="#异步导入" aria-hidden="true">#</a></h2><p>正如上面介绍的，<code>import</code> 语句是静态的，因此存在2个重要的限制：</p><ol><li>模块标识符不能在运行时被构建</li><li>模块导入要在每个稳定最顶部导入，并且不能嵌套在控制流语句（<code>if</code> 等）中</li></ol><p>但有些场景下，这些限制会显得过于严格。比如，如果你想对当前模块导入特定的用户语言，或者根据用户操作系统导入某个模块的变种。</p><p>又或者，某个模块非常的大，只有当用户访问该部分功能时才去加载该模块？</p><p>📚为了克服这些限制，ESM提供了 <code>异步导入（也称之为动态导入）</code> 的能力</p><ul><li>异步导入使用特殊的 <code>import()</code> 操作符在运行时执行</li><li><code>import()</code> 操作符语法上相当于一个函数，该函数接收模块标识符（module identifier）作为参数，返回一个Promise，解析为模块对象（module object）📚</li></ul><p>模块标识符可以是上面讨论过的任何静态导入的模块标识符。下面看一个例子。</p><p>我们构建一个CLI工具，打印不同语言的 <code>Hello World</code> 。未来，我们可能支持更多语句和语言，因此，有一个文件包含每种支持语言的所有面向用户的字符串的翻译是有意义的。</p><p>下面创建我们支持的语言示例模块：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 英文翻译模块</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ./strings-en.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HELLO </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, World!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 中文翻译模块</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ./strings-zh.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> HELLO </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">你好，世界！</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>动态导入：<code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> SUPPORT_LANGS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zh</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]                         </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> selectedLang </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]                       </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">SUPPORT_LANGS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(selectedLang)) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">               </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">THE specifed lang is not supported yet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> transModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./strings/strings-</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">selectedLang</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 4</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 💡 import() 操作符 返回一个Promise</span></span>
<span class="line highlighted"><span style="color:#82AAFF;">import</span><span style="color:#A6ACCD;">(transModule)                                        </span><span style="color:#676E95;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">strings</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">                                       </span><span style="color:#676E95;font-style:italic;">// 6</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">strings</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HELLO</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>步骤：</p><ol><li>定义支持的语言列表</li><li>从命令行中读取第一个参数作为选择的语种</li><li>最后，处理是否支持该语种</li><li>首先，基于选择的语种，动态构建模块名。模块名这里使用的是相对路径</li><li>使用 <code>import()</code> 操作符触发对该模块的动态导入</li><li><code>动态导入是异步的</code>，当模块完全加载后，<code>then()</code> 回调函数会执行，<code>strings</code> 将是动态导入模块的命名空间。之后，使用 <code>strings.HELLO</code> 访问该模块，并在console中打印其值</li></ol><p>命令行：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">en</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zh</span></span>
<span class="line"></span></code></pre></div><h2 id="⭐-深入模块加载" tabindex="-1">⭐ 深入模块加载 <a class="header-anchor" href="#⭐-深入模块加载" aria-hidden="true">#</a></h2><p>为了了解ESM实际工作原理以及它是如何有效的处理循环依赖的，我们必须深入了解使用ESM时，JS代码是如何被解析和执行的。</p><p>👩‍🏫本节将学习：</p><ul><li>ESM如何加载的</li><li>展示只读动态绑定（<code>read-only live bindings</code>）的思想</li><li>循环依赖示例</li></ul><h3 id="加载阶段-loading-phases" tabindex="-1">加载阶段（Loading phases） <a class="header-anchor" href="#加载阶段-loading-phases" aria-hidden="true">#</a></h3><p>解释器（<code>interpreter</code>）的目标就是构建所有必需模块的图解（一种 <strong>依赖图（<code>dependency graph</code>）</strong>）。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通用术语，依赖图可以被定义为 <code>有向图</code>，用于表示一组对象之间的依赖关系。就本节上下文，当我们说依赖图时，我们像表示的是ESM模块之间的依赖关系。后面我们会看到，使用依赖图允许我们确定所有必须模块加载的顺序😎</p></div><p>本质上，依赖图用于解释器理清模块之间是如何相互依赖的，以及代码执行的顺序📚。当Node解释器启动时，它会执行某些代码，通常是以JS文件的形式。该文件是依赖关系的起始点，一般称之为 <strong>入口点（<code>entry point</code>）</strong>。从该入口点开始，解释器会通过深度优先的方式递归的找到所有的 <code>import</code> 语句，直到所有必需代码都被探索到，并被执行。</p><p>📚 更具体的讲，该过程可分为3个独立的阶段：</p><ol><li><strong><code>阶段1 - 构建（或解析）</code></strong>： 找到所有的imports，并递归的从各自文件中加载每个模块的内容</li><li><strong><code>阶段2 - 实例化</code></strong>：对每个导出的实体，在内存中保存一个有名引用，但是还没有赋予任何值。同时，也会对所有 <code>import</code> &amp; <code>export</code> 语句创建引用，用于追踪它们之间的依赖关系（称之为 <code>Linking</code>）。这个阶段还没有执行JS代码</li><li><strong><code>阶段3 - 计算</code></strong>：Node.js最终执行代码，因此之前所有实例化的实体能获取到它们实际的值。现在从入口点开始运行代码变得可能，因为所有的空白都已填补上了🤩</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>简单来说就是，</p><ul><li>阶段1找到所有的点</li><li>阶段2连接创建的路径</li><li>阶段3按正确的顺序遍历所有路径</li></ul></div><p>初看之下，这种方式和CommonJS视乎大同小异，但是却存在本质上的差异。<strong>由于CommonJS动态的天性，CommonJS在依赖图被探索时就会立即执行所有的文件😅</strong>。我们已经看到过了，每次发现一个新的 <code>require</code> 语句时，所有先前的代码都已经执行了。这也是为什么你可以在 <code>if | 循环</code> 语句中使用 <code>require()</code> 的原因，并且可以从变量中使用 <code>require</code> 构建模块标识符。</p><p>在ESM中，<code>这3个阶段是完全分离的</code>，在依赖图完全构建之前，是不会执行任何代码的，因此模块imports &amp; exports必须都是静态的📚。</p><h3 id="只读动态绑定" tabindex="-1">只读动态绑定 <a class="header-anchor" href="#只读动态绑定" aria-hidden="true">#</a></h3><p>ESM另一个有助于解决循环依赖的特质就是，导入的模块实际上是对它们导出值的 <code>只读动态绑定</code>。</p><p>为了解释这个含义，下面看一个简单的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// counter.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>该模块导出2个值：一个 <code>count</code> 和 增加count的函数 <code>increment</code>。</p><p>使用该模块：<code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./counter.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count) </span><span style="color:#676E95;font-style:italic;">// 打印 0</span></span>
<span class="line"><span style="color:#82AAFF;">increment</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 可以改变count的值，动态绑定</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(count) </span><span style="color:#676E95;font-style:italic;">// 打印 1</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// ❌ TypeError: Assignment to constant variable! </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只读绑定导致外部模块无法直接对其它模块值进行改变</span></span>
<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>
<span class="line"></span></code></pre></div><p>可以看出，我们可以随时读取 <code>count</code> 的值，并使用 <code>increment()</code> 改变该值，但是一旦我们直接的对 <code>count</code> 进行改变，我们便会得到一个错误，就好像我们尝试去改变一个 <code>const</code> 绑定😅。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这证明了，当一个实体被导入该作用域时，对原始值的绑定是不能改变的（<code>只读绑定</code>），除非绑定值通过原始模块自身的作用域进行改变（<code>动态绑定</code>），而原始作用域用户是无法直接控制的😎。</p></div><h3 id="循环依赖解析" tabindex="-1">循环依赖解析 <a class="header-anchor" href="#循环依赖解析" aria-hidden="true">#</a></h3><p>下面使用ESM语法重新实现之前的 <a href="./commonjs-modules.html#⭐-循环依赖">CommonJS circle dependency</a>：</p><p><img src="`+s+`" alt="circular-dependencies"></p><p>先看看 <code>a.js</code> &amp; <code>b.js</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> bModule </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./b.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> loaded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bModule</span></span>
<span class="line"><span style="color:#A6ACCD;">loaded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> aModule </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> loaded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> aModule</span></span>
<span class="line"><span style="color:#A6ACCD;">loaded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"></span></code></pre></div><p>入口点 <code>main.js</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./b.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a -&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b -&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b)</span></span>
<span class="line"></span></code></pre></div><p>注意这里我们没有再使用 <code>JSON.stringify</code>，因为它会抛出 <code>TypeError: Converting circular structure to JSON</code>，因为 <code>a.js</code> &amp; <code>b.js</code> 之间实际上存在一个循环引用。</p><p>运行 <code>main.js</code>，可以看到如下打印：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ref</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">1&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Module: null prototype</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">b:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Module: null prototype</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Circular </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">loaded:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">loaded:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">b</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ref</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">1&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Module: null prototype</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">a:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Module: null prototype</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Circular </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">loaded:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">loaded:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>这里有趣的是，<code>a.js</code> 和 <code>b.js</code> 都能完全看清对方，这是不同于CommonJS的，CJS中都只能看到对方的部分内容😅</strong>。</p><p>我们也可以看到所有的 <code>loaded</code> 值均为 <code>true</code>。另外，<code>a</code>中的<code>b</code>是对当前作用域中可访问到的同一个<code>b</code>实例的实际引用，对于b中的a也是如此。这也是为什么我们不能使用 <code>JSON.stringify</code> 序列化这些模块的原因，最后，如果我们交换导入 <code>a.js</code> &amp; <code>b.js</code> 的顺序，最后的结果是不会变化的😎，这也是不同于CommonJS原理的重要一方面。</p><p>模块解析这3个阶段（parsing，instantiation &amp; evaluation）具体发生了什么，是值得花费更多时间去了解的，下面继续使用这个例子进行详解：</p><h4 id="阶段1-解析" tabindex="-1">阶段1：解析 <a class="header-anchor" href="#阶段1-解析" aria-hidden="true">#</a></h4><p>在解析期间，代码从入口点（<code>main.js</code>） 开始被探索。解释器只寻找 <code>import</code> 语句去找出所有必需模块，然后从模块文件中加载源代码。依赖图以深度优先的方式被探索，<strong><code>并且每个模块只会被访问一次</code></strong>。通过这种方式，解释器构建了一种类似树结构的依赖图，如下：</p><p><img src="`+p+'" alt="parsing of cyclic dependencies with EMS"></p><p>解析阶段的步骤:</p><ol><li>从 <code>main.js</code>，首先导入的是 <code>a.js</code>，进入 <code>a.js</code></li><li>在 <code>a.js</code> 中，我们发现一个指向 <code>b.js</code> 的导入</li><li>在 <code>b.js</code> 中，我们又发现对 <code>a.js</code> 的导入（即循环），但是因为 <code>a.js</code> 已经被访问过了，该路径不会再次被探索😎</li><li>此时，探索开始回退：<code>b.js</code> 没有其它的导入了，因此返回到 <code>a.js</code>；而 <code>a.js</code> 也没有其他的import语句了，因此我们返回到 <code>main.js</code>。这里我们又发现另一个指向 <code>b.js</code> 的导入，但是这个模块也已经访问过了，因此该路径也被忽略了。</li></ol><p>此时，我们深度优先的依赖图已经完成，并且我们得到了一个模块的线性视野，如下：（<code>已经移除了循环的模块线性视野</code>）</p><p><img src="'+e+'" alt="移除了循环的模块线性视野"></p><p>该视野相当的简单。现实场景中，存在更多的模块，视野会更像树形结构。</p><h4 id="阶段2-实例化" tabindex="-1">阶段2：实例化 <a class="header-anchor" href="#阶段2-实例化" aria-hidden="true">#</a></h4><p>在实例化阶段，解释器 <strong><code>自下而上</code></strong> 遍历上一阶段得到的树形视图。对于每个模块，解释器都首先查找所有导出的属性，然后在内存中构建导出名地图：<code>实例化阶段视觉表示图</code></p><p><img src="'+c+'" alt="实例化可视化表示图"></p><p>上图描述了每个模块实例化的顺序：</p><ol><li>解释器先从 <code>b.js</code> 开始，然后该模块导出了 <code>loaded</code> 和 <code>a</code></li><li>然后，解释器移到 <code>a.js</code>，它又导出了 <code>loaded</code> 和 <code>b</code></li><li>最后，解释器移到 <code>main.js</code>，该模块没有导出任何功能</li><li>🚨注意，在这个阶段，导出地图只追踪导出名，与之关联的值还没有被初始化</li></ol><p>👩‍🏫经过这些步骤后，解释器再过一遍树形视图，将导出名和导入它们的模块链接起来，如下图所示：<code>链接</code></p><p><img src="'+t+'" alt="linking"></p><p>上图步骤描述如下：</p><ol><li>模块<code>b.js</code>将链接到 <code>a.js</code> 的导出，将它们称为<code>aModule</code></li><li>相反，模块 <code>a.js</code> 将链接到 <code>b.js</code> 的导出，将它们称之为 <code>bModule</code></li><li>最后，<code>main.js</code> 将导入 <code>b.js</code> 中所有导出，称之为 <code>b</code>;同理，也导入所有 <code>a.js</code> 中的导出，称之为 <code>a</code></li><li>🚨再次注意，此时所有值还是<code>未初始化状态</code>。在此阶段，我们仅将引用链接到下一阶段结束时才可访问到的值。</li></ol><h4 id="阶段3-计算" tabindex="-1">阶段3：计算 <a class="header-anchor" href="#阶段3-计算" aria-hidden="true">#</a></h4><p>最后一步就是计算阶段了。在这个阶段，每个文件中的所有代码都最终被执行。<strong><code>执行顺序仍旧是自下向上</code></strong>，考虑到对原始依赖图的顺序后深度优先访问。通过这种方式，<code>main.js</code> 将是最后一个被执行的文件。这样，我们可以确保所有导出值在执行我们主要业务逻辑前都已经被初始化了👩‍🏫：</p><p><img src="'+r+`" alt="evaluation"></p><p>上图的过程：</p><ol><li>执行从 <code>b.js</code> 开始，第一行将该模块导出的 <code>loaded</code> 计算为 <code>false</code></li><li>相似的，导出的 <code>a</code> 属性被计算。这个时候，这一次，它将被计算为对表示模块<code>a.js</code>的模块对象的引用</li><li><code>loaded</code> 属性更改为 <code>true</code>。此时，我们已经完全计算了模块<code>b.js</code>的导出状态；</li><li>现在执行来到了 <code>a.js</code>。再一次，我们先从将 <code>loaded</code> 设置为 <code>false</code> 开始</li><li>此时，导出的 <code>b</code> 被计算为对模块 <code>b.js</code> 的引用</li><li>最后，<code>loaded</code> 更改为 <code>true</code>。此时，我们已经完全计算了模块<code>a.js</code>的导出状态；</li></ol><p>在这些步骤之后，<code>main.js</code> 中的代码才能被执行，并且此时，所有导出的属性都已经被完全计算。<code>因为导入的模块是通过引用的方式被追踪的</code>，我们可以确保每个模块都能看到其它模块最新的状态，即使是循环依赖的形式😎。</p><h2 id="修改其它模块" tabindex="-1">修改其它模块 <a class="header-anchor" href="#修改其它模块" aria-hidden="true">#</a></h2><p>我们已经知道了，通过ESM导入的实体是 <code>只读动态绑定的</code>，因此不能在模块外对其进行重新赋值。</p><p>但，这其实有一个陷阱。虽然我们不能在一个模块中改变另一个模块的默认导出或有名导出是千真万确的，但是，<code>如果绑定的是一个对象，我们仍可以通过给对象属性重新赋值的方式改变对象本身😂</code>。</p><p>这个陷阱给了我们足够多的自由去改变其它模块的行为。为了演示这个想法，我们写一个模块，它能改变Node.js核心的 <code>fs</code> 模块，阻止模块访问文件系统，而是返回mock的数据。这种模块在对依赖文件系统的组件，写测试时还是很有用的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// mock-read-file.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">                        </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> originalReadFile </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readFile       </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> mockedResponse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mockedReadFile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setImmeddiate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">cb</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mockedResponse</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mockEnable</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">responseWith</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 4</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">mockedResponse</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">responseWith</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readFile</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mockedReadFile</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mockDisable</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">             </span><span style="color:#676E95;font-style:italic;">// 5</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readFile</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">originalReadFile</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>让我们审阅一下上面的代码：</p><ol><li>我们做的第一件事就是导入 <code>fs</code> 模块的默认导出。我们稍后再看这个，你只需要记住，<code>fs</code> 模块的默认导出是 <code>一个包含各种和文件系统打交道功能的对象</code></li><li>我们想使用mock实现取代 <code>readFile()</code> 功能。在此之前，我们保存原始实现版本的引用。我们同时声明了一个 <code>mockedResponse</code> 值用于之后的使用</li><li><code>mockedReadFile</code> 函数是用于取代原版的mocked版本实现。这个函数使用 <code>mockedResponse</code> 当前值调用回调。注意这是一个简化版本的实现，实际的函数会在callback之前接收一个可选的 <code>options</code> 参数，用于处理不同类型的编码。</li><li>导出的 <code>mockEnable()</code> 函数用于激活mock功能。原版会被mock版本替代。mock版本会返回和传入的 <code>responsedWith</code> 参数相同的值</li><li>最后，导出的 <code>mockDisable()</code> 函数可用于恢复原版的 <code>fs.readFile()</code> 函数</li></ol><p>使用上面的模块：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">                       </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mockEnable</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mockDisable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./mock-read-file.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">mockEnable</span><span style="color:#A6ACCD;">(Buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))    </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fake-path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">()) </span><span style="color:#676E95;font-style:italic;">// &#39;Hello World&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">mockDisable</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>来一步一步看看上面示例的过程：</p><ol><li>第一步，我们先导入 <code>fs</code> 模块默认的导出。再一次，导入 <code>mock-read-file.js</code> 中的导出</li><li>这里，我们开启mock功能。对每个文件读取，我们想模拟包含了 <code>Hello World</code> 的文件</li><li>最后，我们使用虚假的路径读取文件。这会打印 <code>Hello World</code> ，因为它使用了我们mock的版本。之后我们恢复原版的功能。</li></ol><p>这种方式虽然能生效，但是很脆弱。事实上，有很多种方式这种办法是行不通的。</p><p>在 <code>mock-read-file.js</code> 端，我们可能尝试下面2种导入 <code>fs</code> 模块的方式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 方式1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 方式2</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">readFile</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>上面2种导入方式都是有效的，因为 <code>fs</code> 模块所有文件系统功能都是作为有名导出（除了默认导出是一个功能集合的对象外😎）。</p><p>上面2种 <code>import</code> 语句存在2个问题：</p><ol><li>我们将得到一个 <code>readFile()</code> 函数的只读动态绑定，因此，我们不能在外部模块中改变它。如果我们使用这种方式，当我们尝试给 <code>readFile()</code> 重新赋值时，会得到一个错误</li><li>另一个问题是在<code>main.js</code>中的消费者端，在那里我们也可以使用这两种可选的导入样式。在本例中，我们最终不会使用模拟功能，因此，当试图读取不存在的文件时，代码将触发一个错误。😅</li></ol><p>上面提到的2种 <code>import</code> 方式不生效的原因是，我们的mocking工具改变的只是注册在默认导出的对象中的 <code>readFile()</code> 函数的副本📚，而不是模块最顶层导出的有名导出。</p><p>这个特别的实例给我们展示了，<code>monkey patching</code> 在ESM语境下是多么复杂和不可靠。正因如此，像Jest这样的测试框架提供了mock ESM更可靠的版本（<code>jest-mock</code>）</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>另一种可用于模拟模块的方法是依赖特殊Node.js核心模块<a href="https://nodejs.org/dist/latest-v16.x/docs/api/module.html" target="_blank" rel="noreferrer">module</a>中可用的钩子。一个利用了这个模块的库称之为 mocku，如果你好奇，可以查看其源代码。</p></div><p>📚 我们也可以使用 <code>module</code> 包中的 <code>syncBuiltESMExports()</code> 函数。当这个函数被调用时，默认导出对象中的属性值被再次映射为相等的有名导出，实际上允许将外部变化传递到模块功能，即使是有名导出：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">readFileSync</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line highlighted"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">syncBuiltESMExports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> Buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello, ESM</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line highlighted"><span style="color:#82AAFF;">syncBuiltESMExports</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readFileSync </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> readFileSync) </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div><p>我们可以在启用模拟或恢复原始功能后调用<code>syncBuiltinESMExports()</code>函数，从而使我们的小型文件系统模拟实用程序更加灵活。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>syncBuiltESMExports()</code> 只对Node.js模块（比如 <code>fs</code>）才有效。</p></div><p>我们对ESM的探索到此结束。此时，我们应该能够理解ESM是如何工作的，它是如何加载模块的，以及它是如何处理循环依赖性的。</p><p>作为本章的结束，我们现在准备讨论CommonJS和ESM的一些关键区别和一些有趣的互操作性技术。</p><div class="tip custom-block"><p class="custom-block-title">译者注</p><p>深入理解ESM：</p><ul><li><a href="https://juejin.cn/post/7157970279498137614" target="_blank" rel="noreferrer">通过动画深入理解ES Module - @掘金</a></li><li><a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/" target="_blank" rel="noreferrer">ES modules: A cartoon deep-dive - Lin Clark@Mozila</a></li></ul></div><p>2022年10月21日23:54:48</p>`,172),i=[D];function F(C,A,d,g,m,h){return a(),n("div",null,i)}const b=l(y,[["render",F]]);export{E as __pageData,b as default};
