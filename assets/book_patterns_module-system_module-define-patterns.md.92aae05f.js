import{_ as s,c as a,o as n,N as l}from"./chunks/framework.7812daa2.js";const C=JSON.parse('{"title":"CommonJS模式","description":"","frontmatter":{"title":"CommonJS模式"},"headers":[],"relativePath":"book/patterns/module-system/module-define-patterns.md","lastUpdated":1681457786000}'),o={name:"book/patterns/module-system/module-define-patterns.md"},p=l(`<nav class="table-of-contents"><ul><li><a href="#_1️⃣-有名导出">1️⃣ 有名导出</a></li><li><a href="#_2️⃣-⭐-导出一个函数">2️⃣ ⭐ 导出一个函数</a></li><li><a href="#_3️⃣-导出一个类">3️⃣ 导出一个类</a></li><li><a href="#_4️⃣-⭐-导出一个实例">4️⃣ ⭐ 导出一个实例</a></li><li><a href="#_5️⃣-修改其它模块或全局作用域-猴子补丁">5️⃣ 修改其它模块或全局作用域（猴子补丁）</a></li></ul></nav><p>模块系统除了是一种加载依赖的机制外，同时还是一种定义APIs的工具。与API设计的任何其他问题一样，需要考虑的主要因素是私有功能和公共功能之间的平衡。目标是最大化隐藏信息和API的复用性，同时平衡扩展性和代码复用这样的软件质量要求。</p><p>本节将分析一下Node.js中定义模块最流行的几种模式：</p><ul><li>有名导出（<code>Named exports</code>）</li><li>导出函数，类和类实例</li><li>猴子补丁（<code>Monkey Patching</code>）</li></ul><p>每种模式都对信息隐藏，可扩展性和代码复用进行了自身的平衡。</p><h2 id="_1️⃣-有名导出" tabindex="-1">1️⃣ 有名导出 <a class="header-anchor" href="#_1️⃣-有名导出" aria-label="Permalink to &quot;1️⃣ 有名导出&quot;">​</a></h2><p>👩‍🏫导出公共API最简单的方法是 <code>named exports</code>，将公共属性赋值为 <code>exports</code>(或 <code>module.exports</code>)。通过这种方式，导出的对象成为相关功能的一个容器或命名空间。</p><p>🌰</p><p><code>logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#89DDFF;">exports.</span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">info: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#89DDFF;">exports.</span><span style="color:#82AAFF;">verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">verbose: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><code>导出的函数可通过加载模块的属性的方式被访问</code>，即：<code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// logger.js中导出的2个函数，可通过模块属性的方式使用</span></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verbose</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">verbose</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>大多数Node.js核心模块都使用了这种模式😎。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>但是，CommonJS规范只允许通过 <code>exports</code> 变量导出公共成员。因此，有名导出模式是唯一真正兼容CommonJS规范的模式。而Node.js提供的 <code>module.exports</code> 扩展支持更宽广的模块定义模式🤩，下面我们将看到这一点。</p></div><h2 id="_2️⃣-⭐-导出一个函数" tabindex="-1">2️⃣ ⭐ 导出一个函数 <a class="header-anchor" href="#_2️⃣-⭐-导出一个函数" aria-label="Permalink to &quot;2️⃣ ⭐ 导出一个函数&quot;">​</a></h2><p>最流行的模块定义模式包含将整个 <code>module.exports</code> 赋值给一个函数。</p><ul><li>这个模式最主要的优势在于，<code>它允许你只暴露单一功能</code>，这为模块提供了一个清晰的入口，使模块更易于理解和使用</li><li>它也贴合了 <code>最小表面（small surface）</code> 的原则</li><li>社区也称这个模式为 <code>substack pattern</code></li></ul><p>🌰 <code>logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">info: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>📚这种模式的一种可能扩展是，使用导出的函数作为其它公共APIs的命名空间。</p><ul><li>这是一种非常强大的组合，因为它给模块一个很清晰的单一入口点（主导出函数）</li><li>同时它允许暴露其它次要的或更高级的使用场景的功能🤩</li></ul><p>🎉下面代码展示了如何将上面导出的函数作为命名空间进行扩展：（<code>相当于给函数对象添加新的属性 </code>）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 💡 verbose功能比较次要</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports.</span><span style="color:#82AAFF;">verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">verbose: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用：<code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 因为导出的是一个函数，因此可以直接调用🚀</span></span>
<span class="line highlighted"><span style="color:#82AAFF;">logger</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 次要功能，在其命名空间下 😀</span></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verbose</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">verbose</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>尽管只导出一个函数看起来是一种限制，但实际上，这很好的将重点放在模块中最重要的在单一功能上，同时通过暴露属性的方式降低了次要功能或内部细节的可见性。Node.js模块化强烈推荐采用单一职责原则（<code>SRP</code>）- 即每个模块都应该对单个功能负责，并且该职责应该完全封装在模块中。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>译者注：这种模式最著名的应属 <code>express.js</code>了</p></div><h2 id="_3️⃣-导出一个类" tabindex="-1">3️⃣ 导出一个类 <a class="header-anchor" href="#_3️⃣-导出一个类" aria-label="Permalink to &quot;3️⃣ 导出一个类&quot;">​</a></h2><p>导出类的模块本质上是一个特殊化的函数导出。区别在于，这种模式允许用户通过构造器函数创建新的实例，同时可通过原型链对类进行扩展以及创建新的类。</p><p>🌰：</p><p><code>logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">] </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">info: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">verbose</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">verbose: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Logger</span></span></code></pre></div><p>使用：<code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dbLogger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Logger</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DB</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 实例化</span></span>
<span class="line"><span style="color:#A6ACCD;">dbLogger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> accessLogger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Logger</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ACCESS</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 实例化一个新的</span></span>
<span class="line"><span style="color:#A6ACCD;">accessLogger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">verbose</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">verbose</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>导出一个类仍然是对模块提供单一入口，但相比于 <code>substack pattern</code>，它暴露了更多模块内部细节。另一方面，就扩展性而言，这个模式会更加的强大😎。</p><h2 id="_4️⃣-⭐-导出一个实例" tabindex="-1">4️⃣ ⭐ 导出一个实例 <a class="header-anchor" href="#_4️⃣-⭐-导出一个实例" aria-label="Permalink to &quot;4️⃣ ⭐ 导出一个实例&quot;">​</a></h2><p>📚我们可以利用 <code>require()</code> 函数缓存的机制，轻松的从构造器函数或工厂函数中定义<code>有状态</code>实例，并且状态在不同模块之间进行<code>共享</code>。</p><p>🌰 <code>logger.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Logger</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// count是一个状态</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">] </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 🤩 这里直接导出一个实例</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Logger</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DEFAULT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>使用: <code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>因为模块已经被缓存起来了，因此每次模块被加载时，获取的都是相同的对象实例，因此状态（这里的 <code>count</code>）也得以共享。</p></div><p>这个模式非常类似创建了一个 <strong>单例（<code>singleton</code>）</strong>，但是它不能像单例一样确保整个应用中的唯一性。在分析解析算法时，我们已经看到一个模块可能在应用程序的依赖树中被安装多次。这会导致同一个逻辑模块的多个实例，所有实例都运行在同一个Node.js应用程序的上下文中。（我们将在第7章中详细分析单例模式）</p><p>🎉这个模式的一个有趣细节是，导出实例并不会阻碍创建新实例，即使我们没有导出一个类。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>事实上，我们可以依赖导出实例的 <code>constructor</code> 属性构建一个相同类型的新实例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 🚀 新的知识点</span></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> customLogger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">CUSTOM</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">customLogger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">info</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></div><p>如你所见，通过使用 <code>logger.constructor()</code>，我们可以实例化一个新的 <code>Logger</code> 对象。🚨注意使用这种技术应当十分小心或完全禁用这种使用方式。你可以这样想，既然作者不想导出类，大概是想隐藏这个类才导出实例的。</p><h2 id="_5️⃣-修改其它模块或全局作用域-猴子补丁" tabindex="-1">5️⃣ 修改其它模块或全局作用域（猴子补丁） <a class="header-anchor" href="#_5️⃣-修改其它模块或全局作用域-猴子补丁" aria-label="Permalink to &quot;5️⃣ 修改其它模块或全局作用域（猴子补丁）&quot;">​</a></h2><p><strong>一个模块可以什么也不导出😅</strong>。这看起来可能没什么用，但是，不要忘记了，<strong>模块能够修改全局作用域和全局作用域内的任何对象</strong>，包括在缓存中的模块。但要注意的是，这通常认为是一种坏的实践，但这种模式在某些情况下（比如，测试）是有用且安全大的，并在实际项目中会使用到，因此还是值得了解的。</p><p>我们将修改全局作用域中其它模块或对象的模式称之为 <strong>猴子补丁（<code>Monkey Patching</code>）</strong>。</p><div class="tip custom-block"><p class="custom-block-title">📚</p><p>它通常指的是在运行时修改现有对象以更改或扩展其行为或应用临时修复程序的做法。</p></div><p>🌰如何通过猴子补丁方式给模块添加一个新的函数：<code>patcher.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">customMessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">This is a new functionality</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用新的补丁模块也很简单：<code>main.js</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./patcher</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 引入补丁</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> logger </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./logger</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">logger</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">customMessage</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">🚨</p><p>在这里描述的这个技术可能很危险。主要的问题是，使用修改全局命名空间或其他模块的模块是一种具有 <strong>副作用（<code>side effects</code>）</strong> 的操作。换而言之，它会影响范围之外的实体的状态，这可能会产生不容易预测的后果，特别是当多个模块与相同的实体交互时。</p><p>想象一下，有两个不同的模块试图设置相同的全局变量，或者修改相同模块的相同属性。影响可能是不可预测的(哪个模块获胜?)，但最重要的是，它将对整个应用程序产生影响。</p></div><p>所以，再次小心使用这个技巧，并确保你了解所有可能的副作用，再这样做。此时，我们应该对CommonJS和它通常使用的一些模式有了一个相当完整的理解😎。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>如果你想要一个真实的示例来说明这是如何有用的，请查看 <a href="https://www.npmjs.com/package/nock" target="_blank" rel="noreferrer">nock</a> 库，这是一个允许你在测试中模拟HTTP响应的模块。nock的工作方式是通过猴子补丁 Node.js <code>http</code>模块，并通过改变其行为，使其提供模拟响应，而不是发出真正的http请求。这允许我们的单元测试在不触及实际生产HTTP接口的情况下运行，这在为依赖于第三方api的代码编写测试时非常方便。</p></div><p>后面我们将探索ESM🎉。</p><p>2022年09月30日01:00:20</p>`,59),e=[p];function c(t,r,D,y,F,i){return n(),a("div",null,e)}const d=s(o,[["render",c]]);export{C as __pageData,d as default};
