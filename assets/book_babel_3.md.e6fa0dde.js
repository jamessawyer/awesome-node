import{_ as s,c as a,o as n,N as o}from"./chunks/framework.7812daa2.js";const l="/awesome-node/assets/3-1.72d3fe5e.webp",e="/awesome-node/assets/3-2.2961775e.webp",p="/awesome-node/assets/3-3.99ebb8a5.webp",t="/awesome-node/assets/3-4.3c437009.webp",c="/awesome-node/assets/3-5.06140838.webp",r="/awesome-node/assets/3-6.79aa7e99.webp",i="/awesome-node/assets/3-7.8cf09b09.webp",y="/awesome-node/assets/3-8.966165ce.webp",D="/awesome-node/assets/3-9.dc2ae734.webp",F="/awesome-node/assets/3-10.a5724ee6.webp",C="/awesome-node/assets/3-11.59f777ce.webp",d="/awesome-node/assets/3-12.01ec47da.webp",A="/awesome-node/assets/3-13.31f38bd3.webp",m="/awesome-node/assets/3-14.9b1bb940.webp",b="/awesome-node/assets/3-15.76d02f82.webp",h="/awesome-node/assets/3-16.e5d9253d.webp",j=JSON.parse('{"title":"Babel的AST","description":"","frontmatter":{"title":"Babel的AST"},"headers":[],"relativePath":"book/babel/3.md","lastUpdated":1680857505000}'),f={name:"book/babel/3.md"},g=o('<p>babel 编译的第一步是把源码 parse 成抽象语法树 <code>AST</code> （Abstract Syntax Tree），后续对这个 AST 进行转换。</p><p>整个编译流程都是围绕 AST 来的，所以这一节我们先来熟悉一下 AST：</p><h2 id="常见的-ast-节点" tabindex="-1">常见的 AST 节点 <a class="header-anchor" href="#常见的-ast-节点" aria-label="Permalink to &quot;常见的 AST 节点&quot;">​</a></h2><p>AST 是对源码的抽象，<strong>字面量、标识符、表达式、语句、模块语法、class 语法</strong>都有各自的 AST。</p><p>我们分别来了解一下：</p><h2 id="literal" tabindex="-1">Literal <a class="header-anchor" href="#literal" aria-label="Permalink to &quot;Literal&quot;">​</a></h2><p>📚 <code>Literal</code> 是<strong>字面量</strong>的意思，比如 <code>let name = &#39;guang&#39;</code>中，<code>&#39;guang&#39;</code>就是一个字符串字面量 <code>StringLiteral</code>，相应的还有:</p><ul><li>数字字面量 NumericLiteral</li><li>布尔字面量 BooleanLiteral</li><li>字符串字面量 StringLiteral</li><li>正则表达式字面量 RegExpLiteral 等。</li></ul><p>下面这些字面量都有对应的 Literal 节点：</p><p><img src="'+l+`" alt="Literal"></p><p>代码中的字面量很多，babel 就是通过 <code>xxLiteral</code> 来抽象这部分内容的。</p><h2 id="identifier" tabindex="-1">Identifier <a class="header-anchor" href="#identifier" aria-label="Permalink to &quot;Identifier&quot;">​</a></h2><p>📚 <code>Identifer</code> 是<strong>标识符</strong>的意思，<strong>变量名、属性名、参数</strong>名等各种声明和引用的名字，都是Identifer。</p><p>我们知道，JS 中的标识符只能包含字母或数字或下划线（<code>_</code>）或美元符号（<code>$</code>），且不能以数字开头。这是 Identifier 的词法特点。</p><p>尝试分析一下，下面这一段代码里面有多少 Identifier 呢？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">guang</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">say</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">guang</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>答案是这些</p><p><img src="`+e+`" alt="Identifiers"></p><h2 id="statement" tabindex="-1">Statement <a class="header-anchor" href="#statement" aria-label="Permalink to &quot;Statement&quot;">​</a></h2><p>📚 <code>statement</code> 是语句，它是<strong>可以独立执行的单位</strong>，比如 <code>break</code>、<code>continue</code>、<code>debugger</code>、<code>return</code> 或者 <code>if</code> 语句、<code>while</code> 语句、<code>for</code> 语句，还有<code>声明语句，表达式语句</code>等。我们写的每一条可以独立执行的代码都是语句。</p><p>语句末尾一般会加一个分号分隔，或者用换行分隔。</p><p>下面这些我们经常写的代码，每一行都是一个 Statement：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">continue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">debugger</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;">(e) </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> obj) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (v)</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:;}</span></span>
<span class="line"><span style="color:#FFCB6B;">label</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> (a)</span><span style="color:#89DDFF;">{}</span></span></code></pre></div><p>它们对应的 AST 节点如下图所示：</p><p><img src="`+p+`" alt="Statements"></p><p>😎语句是代码执行的最小单位，可以说，代码是由语句（Statement）构成的。</p><h2 id="declaration" tabindex="-1">Declaration <a class="header-anchor" href="#declaration" aria-label="Permalink to &quot;Declaration&quot;">​</a></h2><p>📚 声明语句是一种特殊的语句，它执行的逻辑是在作用域内<code>声明一个变量</code>、<code>函数</code>、<code>class</code>、<code>import</code>、<code>export</code> 等。</p><p>比如下面这些语句都是声明语句：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 变量声明</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// 函数声明</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">C</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 类声明</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 导入声明</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 默认导出声明</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// 有名导出声明</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">e</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 导出所有声明</span></span></code></pre></div><p>它们对应的 AST 节点如下图：</p><p><img src="`+t+`" alt="Declarations"></p><p>声明语句用于定义变量，这也是代码中一个基础组成部分。</p><h2 id="expression" tabindex="-1">Expression <a class="header-anchor" href="#expression" aria-label="Permalink to &quot;Expression&quot;">​</a></h2><p>📚 <code>expression</code> 是<strong>表达式</strong>，特点是<code>执行完以后有返回值</code>，这是和语句 (<code>statement</code>) 的区别。</p><p>下面是一些常见的表达式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]      </span><span style="color:#676E95;font-style:italic;">// 数组表达式</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 赋值表达式</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 二元表达式</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 一元表达式</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 函数表达式</span></span>
<span class="line"><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 箭头函数表达式</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">// class 表达式</span></span>
<span class="line"><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// 标识符</span></span>
<span class="line"><span style="color:#89DDFF;">this;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// this表达式</span></span>
<span class="line"><span style="color:#A6ACCD;">super</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// super</span></span>
<span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">:b</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">// 绑定表达式</span></span></code></pre></div><p>它们对应的AST如图：</p><p><img src="`+c+`" alt="Expressions"></p><p>🤔细心的同学可能会问 <code>identifier</code> 和 <code>super</code> 怎么也是表达式呢？</p><p><strong>因为 identifier、super 有返回值，符合表达式的特点，所以也是 expression。</strong></p><p>📚我们判断 AST 节点是不是某种类型要看它是不是符合该种类型的特点，比如<strong>语句的特点是能够单独执行，表达式的特点是有返回</strong>值。</p><p>1️⃣ 有的表达式可以单独执行，符合语句的特点，所以也是语句，比如<code>赋值表达式、数组表达式</code>等。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>2️⃣ 但有的表达式不能单独执行，需要和其他类型的节点组合在一起构成语句。</p><p>比如匿名函数表达式和匿名 class 表达式单独执行会报错：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><p>需要和其他部分一起构成一条语句，比如组成赋值语句：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">{}</span></span></code></pre></div><p>这条赋值语句对应的 AST 是这样的：</p><p><img src="`+r+`" alt="赋值表达式AST"></p><p>你会发现赋值语句的 AST 节点 <code>AssignmentExpression</code> 包裹了一层<code>ExpressionStatement</code> 的节点，代表这个表达式是被当成语句执行的。</p><h2 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;Class&quot;">​</a></h2><p><code>class</code> 的语法也有专门的 AST 节点来表示。</p><p>📚 整个 class 的内容是 <code>ClassBody</code>，属性是 <code>ClassProperty</code>，方法是<code>ClassMethod</code>（通过 <code>kind</code> 属性来区分是 <code>constructor</code> 还是 <code>method</code>）。</p><p>比如下面的代码</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Guang</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">guang</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eat</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>对应的AST是这样的</p><p><img src="`+i+'" alt="Class AST"></p><p>class 是 es next 的语法，babel 中有专门的 AST 来表示它的内容。</p><h2 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h2><p><code>es module</code> 是语法级别的模块规范，所以也有专门的 AST 节点。</p><h3 id="import" tabindex="-1">import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;import&quot;">​</a></h3><p>import 有 3 种语法：</p><ol><li><p><code>named import</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p><code>Default import</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></li><li><p><code>Namespace import</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ol><p>这 3 种语法都对应 <code>ImportDeclaration</code> 节点，但是 <code>specifiers</code> 属性不同，分别对应 <code>ImportSpicifier</code>、<code>ImportDefaultSpecifier</code>、<code>ImportNamespaceSpcifier</code>。</p><p><img src="'+y+`" alt="Import AST"></p><p>图中黄框标出的就是 <code>specifier</code> 部分。可以直观的看出整体结构相同，只是 specifier 部分不同，所以 import 语法的 AST 的结构是 ImportDeclaration 包含着各种 import specifier。</p><h3 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-label="Permalink to &quot;export&quot;">​</a></h3><p>export 也有3种语法：</p><ol><li><p><code>named export</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span></code></pre></div></li><li><p><code>Default export</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p><code>all export</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ol><p>分别对应 <code>ExportNamedDeclaration</code>、<code>ExportDefaultDeclaration</code>、<code>ExportAllDeclaration</code> 的 AST。</p><p>比如这三种 export</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>对应的 AST 节点为</p><p><img src="`+D+'" alt="export AST"></p><h2 id="program-directive" tabindex="-1">Program &amp; Directive <a class="header-anchor" href="#program-directive" aria-label="Permalink to &quot;Program &amp; Directive&quot;">​</a></h2><p><code>program</code> 是代表整个程序的节点，它有 <code>body</code> 属性代表程序体，存放 statement 数组，就是具体执行的语句的集合。还有 <code>directives</code> 属性，存放 Directive 节点，比如<code>&quot;use strict&quot;</code> 这种指令会使用 Directive 节点表示。</p><p><img src="'+F+'" alt="Program &amp; Directive AST"></p><p>📚 Program 是包裹具体执行语句的节点，而 Directive 则是代码中的指令部分。</p><h2 id="file-comment" tabindex="-1">File &amp; Comment <a class="header-anchor" href="#file-comment" aria-label="Permalink to &quot;File &amp; Comment&quot;">​</a></h2><p>babel 的 AST 最外层节点是 <code>File</code>，它有 <code>program</code>、<code>comments</code>、<code>tokens</code> 等属性，分别存放 Program 程序体、注释、token 等，是<strong>最外层节点</strong>。</p><p>注释分为<code>块注释</code>和<code>行内注释</code>，对应 <code>CommentBlock</code> 和 <code>CommentLine</code> 节点。</p><p><img src="'+C+'" alt="Comment AST"></p><p>上面 <code>6</code> 种就是常见的一些 AST 节点类型，babel 就是通过这些节点来抽象源码中不同的部分。</p><h2 id="ast-可视化查看工具" tabindex="-1">AST 可视化查看工具 <a class="header-anchor" href="#ast-可视化查看工具" aria-label="Permalink to &quot;AST 可视化查看工具&quot;">​</a></h2><p>这么多 AST 我们都要记住么？</p><p>不需要。可以通过 <a href="https://astexplorer.net/" target="_blank" rel="noreferrer">astexplorer.net</a> 这个网站来可视化的查看。</p><p><img src="'+d+'" alt="AST explorer"></p><p>这个网站可以查看代码 parse 以后的 AST，可以切换 parse 的语言和用的 parser，也可以修改 parse options。</p><p>点击这里的 save 就可以保存下来，然后把 url 分享出去：</p><p><img src="'+A+'" alt="AST save &amp; share"></p><p>比如这个链接: <a href="https://astexplorer.net/#/gist/7267e806bfec60b48b9d39d039f29313/c343ad5a76a8dd78c22d39ce89f4d0733c2b17e4" target="_blank" rel="noreferrer">ast share</a></p><ul><li>如果想查看全部的 AST 可以在 <a href="https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md" target="_blank" rel="noreferrer">AST node types spec - @github</a></li><li>或者直接去看 <code>@babel/types</code> 的 <a href="https://github.com/babel/babel/blob/main/packages/babel-types/src/ast-types/generated/index.ts" target="_blank" rel="noreferrer">typescript定义</a></li></ul><h2 id="ast-的公共属性" tabindex="-1">AST 的公共属性 <a class="header-anchor" href="#ast-的公共属性" aria-label="Permalink to &quot;AST 的公共属性&quot;">​</a></h2><p>每种 AST 都有自己的属性，但是它们也有一些公共的属性：</p><ul><li><code>type</code>: AST 节点的类型</li><li><code>start、end、loc</code>：start 和 end 代表该节点在源码中的开始和结束下标。而 loc 属性是一个对象，有 line 和 column 属性分别记录开始和结束的行列号。</li><li><code>leadingComments、innerComments、trailingComments</code>： 表示开始的注释、中间的注释、结尾的注释，每个 AST 节点中都可能存在注释，而且可能在开始、中间、结束这三种位置，想拿到某个 AST 的注释就通过这三个属性。</li></ul><p>比如 <a href="https://astexplorer.net/#/gist/7267e806bfec60b48b9d39d039f29313/c343ad5a76a8dd78c22d39ce89f4d0733c2b17e4" target="_blank" rel="noreferrer">这段有注释的代码的AST</a></p><p><img src="'+m+'" alt="comments types"></p><ul><li><code>extra</code>：记录一些额外的信息，用于处理一些特殊情况。比如 StringLiteral 的 value 只是值的修改，而修改 <code>extra.raw</code> 则可以连同<strong>单双引号</strong>一起修改。</li></ul><p><img src="'+b+'" alt="extra property"></p><p>修改 value 只能修改值，修改 extra.raw 可以连引号一起修改。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这一节我们学习了代码中常见的语法在 babel 的 AST 中对应的节点。</p><p>我们学习了： 标识符 Identifer、各种字面量 xxLiteral、各种语句 xxStatement，各种声明语句 xxDeclaration，各种表达式 xxExpression，以及 Class、Modules、File、Program、Directive、Comment 这些 AST 节点。</p><p>了解了这些节点，就能知道平时写的代码是怎么用 AST 表示的。</p><p><img src="'+h+'" alt="AST Node Types"></p><p>当然也不需要记，可以用 (<a href="https://astexplorer.net" target="_blank" rel="noreferrer">astexpoler.net</a>) 可视化的查看。</p><p><strong>AST 节点可能同时有多种类型，确定一种 AST 节点是什么类型主要看它的特点</strong>，比如 Statement 的特点是可以单独执行，Expression 的特点是有返回值，所以一些可以单独执行的 Expression 会包一层 ExpressionStatement。</p><p>不同 AST 节点有不同的属性来存放对应的源码信息，但是都有一些公共属性如 type、xxComments、loc 等。</p><p>学会了 AST，就可以把对代码的操作转为对 AST 的操作了，这是编译、静态分析的第一步。</p><p>2023年03月20日16:43:47</p>',112),u=[g];function x(S,_,T,E,k,v){return n(),a("div",null,u)}const q=s(f,[["render",x]]);export{j as __pageData,q as default};
