import{_ as s,a}from"./chunks/pipe-stream-example.11e35dd0.js";import{_ as n,c as o,o as l,N as p}from"./chunks/framework.7812daa2.js";const e="/awesome-node/assets/echo-socket-server.d7f7a3ed.jpg",t="/awesome-node/assets/hash-server.4a6a9b72.jpg",u=JSON.parse('{"title":"Stream in Practice","description":"","frontmatter":{"title":"Stream in Practice"},"headers":[],"relativePath":"core/stream/stream-in-practice.md","lastUpdated":1681269310000}'),c={name:"core/stream/stream-in-practice.md"},r=p(`<p>在 <a href="https://blog.insiderattack.net/a-visual-guide-to-nodejs-streams-9d2d594a9bf5" target="_blank" rel="noreferrer">A Visual Guide to NodeJS Streams - Deepal Jayasekara @medium</a> 这篇文章中，我描述了什么是流，以及使用可视化的方式表示了如何在NodeJS中使用流。可视化对于粗略理解概念很好，但是如果能在实际应用中使用它，则可以加深理解。这篇文章中，我们将展示在实际的应用中，如何使用流。</p><h2 id="_1️⃣-⭐理解可读流-understanding-a-readable-stream" tabindex="-1">1️⃣ ⭐理解可读流（Understanding a Readable Stream） <a class="header-anchor" href="#_1️⃣-⭐理解可读流-understanding-a-readable-stream" aria-label="Permalink to &quot;1️⃣ ⭐理解可读流（Understanding a Readable Stream）&quot;">​</a></h2><p>在进一步阅读前，我们使用下面例子来理解可读流是如何工作的。下面代码中，我使用 <code>fs.createReadStream</code> 方法创建一个可读流，读取 <code>foo.txt</code> 文件，文件类容是 <strong><code>This is foo!!!</code></strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createReadStream</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file opened!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pause</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resume</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// wait for 3s before</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">chunk</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">got some data: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pause</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stream paused!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">resume</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stream in flowing mode!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stream ended!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">close</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stream closed!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>如果我们运行上面代码，会输出：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flowing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mode!</span></span>
<span class="line"><span style="color:#FFCB6B;">file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">opened!</span></span>
<span class="line"><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">paused!</span></span>
<span class="line"><span style="color:#FFCB6B;">waiting</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">seconds...</span></span>
<span class="line"><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flowing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mode!</span></span>
<span class="line"><span style="color:#FFCB6B;">got</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">some</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">data:</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">This</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo!!!</span></span>
<span class="line"><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ended!</span></span>
<span class="line"><span style="color:#FFCB6B;">stream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">closed!</span></span></code></pre></div><p>让我理解这些输出：</p><ol><li>当我们调用 <code>fs.createReadStream()</code> 方法时，会创建一个可读流，但是其默认不是 <code>flowing</code> （流动）模式，这意味着流不能从 <code>foo.txt</code> 文件中生成数据</li><li>一旦我们添加了 <code>data</code> 事件，流切换为 <code>flowing</code> 模式，并触发 <code>resume</code> 事件，从而调用监听 <code>resume</code> 事件的handler</li><li>操作系统打开 <code>foo.txt</code> 会导致可读文件流触发 <code>open</code> 事件，这会调用监听了 <code>open</code> 事件的handler</li><li>在 <code>open</code> 事件handler中，我们调用了 <code>reader.pause()</code> 方法。这将导致流从 <code>flowing</code> （流动）模式切换为 <code>paused</code> （暂停）模式。在暂停模式中，流不会从底层文件中产生任何数据。因此，直到流显式的回到 <code>flowing</code> 模式之前都不会触发 <code>data</code> 事件</li><li>3秒等待后，我们调用 <code>reader.resume()</code>，将流切换回 <code>flowing</code> 模式，然后流就会开始产生数据，并触发 <code>data</code> 事件</li><li>依据文件尺寸，会触发一次或多次的 <code>data</code> 事件。在我们这个示例中，文本数据流很小，足以被缓存到内存中，因此只会触发一次 <code>data</code> 事件。</li><li>一旦数据从流中完全读取，流会触发 <strong><code>end</code></strong> 事件，用于表示流中没有需要被读取的数据了</li><li>最后，操作系统关闭底层文件，<code>close</code> 事件被触发</li></ol><p>依据可读流的目的，也可能触发一些实现相关的自定义事件。这个例子中，虽然我们只看到了可读流不同阶段，但是 <code>flowing &amp; paused</code> 模式在所有可读流中都是通用的😎。</p><div class="tip custom-block"><p class="custom-block-title">译者注</p><p>理解这个例子，对于 <code>Readable</code> 流的各个事件含义，有很大的帮助🚀</p></div><h2 id="_2️⃣-一个简单的管道-a-trivial-pipe" tabindex="-1">2️⃣ 一个简单的管道（A trivial pipe） <a class="header-anchor" href="#_2️⃣-一个简单的管道-a-trivial-pipe" aria-label="Permalink to &quot;2️⃣ 一个简单的管道（A trivial pipe）&quot;">​</a></h2><p>正如管道将水源和目的地连接在一起一样，流中的 <strong>管道</strong> 用于将可读流和可写流进行连接。我们先从 <a href="./stream-visulization.html">流可视化</a> 这篇文章回想一下 <code>管道</code> 是什么：</p><p><img src="`+s+`" alt="Piping Stream"></p><p>下面代码片段中，我们使用 <code>fs.createReadStream</code> 创建一个可读流，并将其与 <code>process.stdout</code> 可写流连接到一起，将文本打印到控制台，比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createReadStream</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stdout)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>最常用的 <code>console.log</code> 是对 <code>process.stdout</code> 的包装😎</p></div><h2 id="_3️⃣-一个回响服务器-an-echo-server" tabindex="-1">3️⃣ 一个回响服务器（An echo server） <a class="header-anchor" href="#_3️⃣-一个回响服务器-an-echo-server" aria-label="Permalink to &quot;3️⃣ 一个回响服务器（An echo server）&quot;">​</a></h2><p>下面我们看看，如何在一个稍微不同的情形下使用管道。下面是一个回响服务器，它接受客户端的请求，然后将客服端请求的body再返回给客户端</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>下面我们试着理解 <code>req &amp; res</code> 的含义。</p><p>当客服端和服务端进行通信时，它们其实是通过操作系统在各端创建的 <strong><code>sockets</code></strong> 来进行的。在NodeJS应用中，我们可以使用 <a href="https://nodejs.org/api/net.html#net_class_net_socket" target="_blank" rel="noreferrer">TCP Socket 流</a> 进行通信。正如 <a href="./stream-visulization.html">Stream图解</a> 这篇文章中提到的，<strong>NodeJS中的TCP socket 是一个双工流</strong>，因此既可以从Socket中读取数据，也可以向Socket中写入数据。</p><p>然而，NodeJS的 <code>http</code> 模块基于TCP sockets的基础上提供了更多的功能，暴露了2个分开的用于从socket中读取和写入socket的流：</p><ol><li><a href="https://nodejs.org/api/http.html#class-httpincomingmessage" target="_blank" rel="noreferrer">IncomingMessage</a>: 来自socket的可读流。在上面例子中，可以在request handler中通过 <code>req</code> 对象访问到该流。NodeJS的 <code>http</code> 模块从socket中读取进来的请求内容，然后将其推入到 <code>IncomingMessage</code> 可读流中。</li><li><a href="https://nodejs.org/api/http.html#class-httpoutgoingmessage" target="_blank" rel="noreferrer">OutgoingMessage</a>: 写入到socket的可写流。在上面例子中，可以在request handler中通过 <code>res</code> 对象访问到该流。NodeJS的 <code>http</code> 模块将写入 <code>OutgoingMessage</code> 可写流的数据传递给socket流。这个数据然后被写入到由操作系统创建的实际的TCP socket中，然后发送给客户端</li></ol><p>掌握了这些信息后，我们的回响服务器可以用下图表示：</p><p><img src="`+e+'" alt="echo Socket server"></p><p>在这个回响服务中，我们简单的将 <code>req</code> 可读流通过管道连接到 <code>res</code> 可写流中，因此请求体内容再次返回到客户端中。</p><p>我们可以开启服务，使用 <code>curl</code> 命令来演示：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://localhost:</span><span style="color:#F78C6C;">3000</span></span></code></pre></div><p>你将看到从服务端返回的 <code>hello</code> 。</p><h2 id="_4️⃣-多次管道-pipe-multiple-times" tabindex="-1">4️⃣ 多次管道（Pipe multiple times） <a class="header-anchor" href="#_4️⃣-多次管道-pipe-multiple-times" aria-label="Permalink to &quot;4️⃣ 多次管道（Pipe multiple times）&quot;">​</a></h2><p>目前，我们看到了如何使用 <code>pipe</code> 将一个可读流和一个可写流进行连接。<code>pipe</code> 还可用于将一个可读流连接到多个可写流中😎。下面例子中，来自可写流的内容被拷贝到2个可写流中。</p><p>将 <code>foo.txt</code> 使用 <code>pipe</code> 创建2个 <code>copy1.txt &amp; copy2.txt</code> 拷贝：</p><p><img src="'+a+`" alt="Pipe Stream example"></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createReadStream</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> writer1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createWriteStream</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./copy1.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> writer2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createWriteStream</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./copy2.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">(writer1)</span></span>
<span class="line"><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">(writer2)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>尽管这是一个很简单的例子，但是多管道在实际应用中是十分有用的。比如，在http服务中，你想将进来的请求代理到上游的服务器的同时，将请求的内容用于日志和监控。</p></div><blockquote><p>管道的问题</p></blockquote><p>管道虽然很有用和便利，但是对流使用多管道处理错误会变得很棘手。这是因为可读流或可写流如果发生错误，管道不会自动的销毁和清理，这可能导致内存泄漏。因此，在生产中使用 <code>require(&#39;stream&#39;).pipeline</code> 函数去将流管道化就很明智。它能够帮助你追踪错误以及进行清理：<a href="https://nodejs.org/api/stream.html#streampipelinestreams-callback" target="_blank" rel="noreferrer">pipeline - nodejs docs</a></p><div class="warning custom-block"><p class="custom-block-title">译者注</p><p>能使用 <code>pipeline</code> 就尽量使用它，Readable的 <code>pipe()</code> 方法对于错误处理并不是很友好，这一点可以参考一下 Node.js Patterns 关于Streams的章节。</p></div><h2 id="_5️⃣-hash服务器-a-hash-server" tabindex="-1">5️⃣ hash服务器（A hash server） <a class="header-anchor" href="#_5️⃣-hash服务器-a-hash-server" aria-label="Permalink to &quot;5️⃣ hash服务器（A hash server）&quot;">​</a></h2><p>上面的例子中，我们讨论了可读流和可写流，下面我们看看如何将可写流，转换流和可写流结合起来。</p><p>下面的服务，对请求的body内容生成 <code>SHA-512</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> pipeline </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stream</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> createHash </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crypto</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">post</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/hash</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hasher</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createHash</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sha512</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">hasher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setEncoding</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">base64</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">pipeline</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hasher</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headersSent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendStatus</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>上面的例子中，使用到了 <code>pipeline</code> 方法，而不是之前的 <code>pipe()</code>,下图为hash服务的功能图：</p><p><img src="`+t+'" alt="hash server"></p><p>下面试着理解上图的流程的含义：</p><ol><li>正如之前了解的， <code>req</code> 是一个可读流，我们可用它读取请求的内容</li><li><code>crypto</code> 模块中的 <code>createHash</code> 函数可以创建一个 <strong>hash 流</strong>， 它是一个转换流，因此我们可以将内容写入到它里面，然后经过hash函数，得到hash后的内容。通过将 <code>req</code> 可读流连接到 <code>hasher</code> 转换流，我们将请求体进行hash处理</li><li><code>res</code> 是一个可写流， 当 <code>hasher</code> 通过管道连接到 <code>res</code>, <code>hasher</code> 产生的hash数据流流向 <code>res</code> 流，最终写入到socket中</li></ol><p>下面我们启动服务，使用 <code>curl</code> 命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://localhost:</span><span style="color:#F78C6C;">3000</span><span style="color:#C3E88D;">/hash</span></span></code></pre></div><p>你将得到下面输出响应内容，它是对 <code>test</code> 进行 <code>SHA-512</code>后，然后base64编码后的字符：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">7iaw3Ur350mqGo7jwQrpkj9hiYB3Lkc/iBml1JQODbJ6wYX4oOHV+E+IvIh/1nsUNzLDBMxfqa2Ob1f1ACio/w</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">=</span></span></code></pre></div><p>流因其高效性和低内存使用，在NodeJS应用中被广泛使用，如果你想进一步深入学习，推荐阅读NodeJS中<a href="https://nodejs.org/api/stream.html" target="_blank" rel="noreferrer">流的官方文档</a>。</p><p>原文链接：</p><ul><li><a href="https://blog.insiderattack.net/nodejs-streams-in-practice-980b3cdf4511" target="_blank" rel="noreferrer">Node.js Streams In Practice</a></li></ul><p>2022年12月05日15:49:37</p>',54),y=[r];function D(F,C,A,i,d,h){return l(),o("div",null,y)}const f=n(c,[["render",D]]);export{u as __pageData,f as default};
