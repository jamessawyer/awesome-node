import{_ as s,c as a,o as n,V as l}from"./chunks/framework.478efc10.js";const o="/awesome-node/assets/15-1.28995ef6.webp",A=JSON.parse('{"title":"构建性能极致优化","description":"","frontmatter":{"title":"构建性能极致优化"},"headers":[],"relativePath":"book/webpack/15.md","lastUpdated":1682175845000}'),e={name:"book/webpack/15.md"},p=l(`<p>前面章节我们已经详细探讨 Webpack 中如何借助若干工具分析构建性能，以及如何使用缓存与多进程能力提升构建性能的基本方法与实现原理，这两种方法都能通过简单的配置，极大提升大型项目的编译效率。</p><p>除此之外，还可以通过一些普适、细碎的最佳实践，减少编译范围、编译步骤提升性能，包括：</p><ul><li>使用最新版本 Webpack、Node；</li><li>配置 <code>resolve</code> 控制资源搜索范围；</li><li>针对 npm 包设置 <code>module.noParse</code> 跳过编译步骤；</li><li>等等。</li></ul><p>下面我们一一展开，解释每条最佳实践以及背后的逻辑。</p><h2 id="使用最新版本" tabindex="-1">使用最新版本 <a class="header-anchor" href="#使用最新版本" aria-label="Permalink to &quot;使用最新版本&quot;">​</a></h2><p>始终使用最新 Webpack 版本，这算的上是性价比最高的优化手段之一了！从 Webpack V3，到 V4，再到最新的 V5 版本，虽然构建功能在不断叠加增强，但性能反而不断得到优化提升，这得益于 Webpack 开发团队始终重视构建性能，在各个大版本之间不厌其烦地重构核心实现，例如：</p><ul><li>V3 到 V4 重写 Chunk 依赖逻辑，将原来的父子树状关系调整为 <code>ChunkGroup</code> 表达的有序图关系，提升代码分包效率；</li><li>V4 到 V5 引入 <code>cache</code> 功能，支持将模块、模块关系图、产物等核心要素持久化缓存到硬盘，减少重复工作🎉。</li></ul><p>其次，新版本通常还会引入更多性能工具，例如 Webpack5 的 <a href="./13.html">cache</a>(持久化缓存)、<a href="https://webpack.js.org/configuration/experiments/#experimentslazycompilation" target="_blank" rel="noreferrer">lazyCompilation</a>（按需编译，下面展开介绍） 等。因此，开发者应该保持时刻更新 Webpack 以及 Node、NPM or Yarn 等基础环境，尽量使用最新稳定版本完成构建工作。</p><h3 id="使用-lazycompilation" tabindex="-1">使用 <code>lazyCompilation</code> <a class="header-anchor" href="#使用-lazycompilation" aria-label="Permalink to &quot;使用 \`lazyCompilation\`&quot;">​</a></h3><p>Webpack 5.17.0 之后引入实验特性 <a href="https://webpack.js.org/configuration/experiments/#experimentslazycompilation" target="_blank" rel="noreferrer">lazyCompilation</a>，用于实现 <code>entry</code> 或异步引用模块的<strong>按需编译</strong>，这是一个非常实用的新特性！</p><p>试想一个场景，你的项目中有一个入口（<code>entry</code>）文件及若干按路由划分的异步模块，Webpack 启动后会立即将这些入口与异步模块全部一次性构建好 —— 即使页面启动后实际上只是访问了其中一两个异步模块， 这些花在异步模块构建的时间着实是一种浪费！<code>lazyCompilation</code> 的出现正是为了解决这一问题。用法很简单：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-p2vEw" id="tab-Xqq7Z12" checked="checked"><label for="tab-Xqq7Z12">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">experimental</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">lazyCompilation</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>启动 <code>lazyCompilation</code> 后，代码中通过异步引用语句如 <code>import(&#39;./xxx&#39;)</code> 导入的模块（以及未被访问到的 <code>entry</code>）都不会被立即编译，而是直到页面正式请求该模块资源（例如切换到该路由）时才开始构建，效果与 Vite 相似，能够极大提升冷启速度。</p><p>此外，<code>lazyCompilation</code> 支持如下参数：</p><ul><li><code>backend</code>： 设置后端服务信息，一般保持默认值即可；</li><li><code>entries</code>：设置是否对 <code>entry</code> 启动按需编译特性；</li><li><code>imports</code>：设置是否对异步模块启动按需编译特性；</li><li><code>test</code>：支持正则表达式，用于声明对那些异步模块启动按需编译特性。</li></ul><p>不过，<code>lazyCompilation</code> 还处于实验阶段，无法保证稳定性，接口形态也可能发生变更，建议只在开发环境使用。</p><h2 id="约束-loader-执行范围" tabindex="-1">约束 Loader 执行范围 <a class="header-anchor" href="#约束-loader-执行范围" aria-label="Permalink to &quot;约束 Loader 执行范围&quot;">​</a></h2><p>Loader 组件用于将各式文件资源转换为可被 Webpack 理解、构建的标准 JavaScript 代码，正是这一特性支撑起 Webpack 强大的资源处理能力。不过，Loader 在执行内容转换的过程中可能需要比较密集的 CPU 运算，如 <code>babel-loader</code>、<code>eslint-loader</code>、<code>vue-loader</code> 等，需要反复执行代码到 AST，AST 到代码的转换😅。</p><p>因此开发者可以根据实际场景，使用 <code>module.rules.include</code>、<code>module.rules.exclude</code> 等配置项，限定 Loader 的执行范围 —— 通常可以排除 <code>node_modules</code> 文件夹，如：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-xfHac" id="tab-Wfv41gT" checked="checked"><label for="tab-Wfv41gT">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>配置 <code>exclude: /node_modules/</code> 属性后，Webpack 在处理 <code>node_modules</code> 中的 js 文件时会直接跳过这个 <code>rule</code> 项，不会为这些文件执行 Loader 逻辑。</p><p>此外，<code>exclude</code> 与 <code>include</code> 还支持类似 MongoDB 参数风格的值，也就是通过 <code>and/not/or</code> 属性配置组合过滤逻辑，如：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-ABTg0" id="tab-N1lxDFw" checked="checked"><label for="tab-N1lxDFw">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">and</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">not</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">] </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>上述配置的逻辑是：过滤 <code>node_modules</code> 文件夹中除 <code>lodash</code> 外的所有文件。使用这种能力，我们可以适当将部分需要转译处理的 NPM 包（例如代码中包含 ES6 语法）纳入 Loader 处理范围中。</p><ul><li><a href="https://webpack.docschina.org/configuration/module/#condition" target="_blank" rel="noreferrer">Rule.exclude Condition - webpack docs</a></li></ul><h2 id="使用-noparse-跳过文件编译" tabindex="-1">使用 <code>noParse</code> 跳过文件编译 <a class="header-anchor" href="#使用-noparse-跳过文件编译" aria-label="Permalink to &quot;使用 \`noParse\` 跳过文件编译&quot;">​</a></h2><p>有不少 NPM 库已经提前做好打包处理（文件合并、Polyfill、ESM 转 CJS 等），不需要二次编译就可以直接放在浏览器上运行，例如：</p><ul><li>Vue2 的 <code>node_modules/vue/dist/vue.runtime.esm.js</code> 文件；</li><li>React 的 <code>node_modules/react/umd/react.production.min.js</code> 文件；</li><li>Lodash 的 <code>node_modules/lodash/lodash.js</code> 文件。</li></ul><p>对我们来说，这些资源文件都是独立、内聚的代码片段，没必要重复做代码解析、依赖分析、转译等操作，此时可以使用 <a href="https://webpack.docschina.org/configuration/module/#modulenoparse" target="_blank" rel="noreferrer">module.noParse</a> 配置项跳过这些资源，例如：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-DKphF" id="tab-TPFASAO" checked="checked"><label for="tab-TPFASAO">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">noParse</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>配置后，所有匹配该正则的文件都会跳过前置的构建、分析动作，直接将内容合并进 Chunk，从而提升构建速度。不过，使用 <code>noParse</code> 时需要注意：</p><ol><li>由于跳过了前置的 AST 分析动作，构建过程无法发现文件中可能存在的语法错误，需要到运行（或 Terser 做压缩）时才能发现问题，所以必须确保 <code>noParse</code> 的文件内容正确性；</li><li>由于跳过了依赖分析的过程，所以文件中，建议不要包含 <code>import/export/require/define</code> 等模块导入导出语句 —— 换句话说，<code>noParse</code> 文件不能存在对其它文件的依赖，除非运行环境支持这种模块化方案；</li><li>由于跳过了内容分析过程，Webpack 无法标记该文件的导出值，也就无法实现 Tree-shaking。</li></ol><p>综上，建议在使用 <code>noParse</code> 配置 NPM 库前，先检查 NPM 库默认导出的资源满足要求，例如 React@18 默认定义的导出文件是 <code>index.js</code>：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-gZkdv" id="tab-linDn7J" checked="checked"><label for="tab-linDn7J">react package.json</label></div><div class="blocks"><div class="language-json active"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>但 <code>node_module/react/index.js</code> 文件包含了模块导入语句 <code>require</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// node_module/react/index.js</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./cjs/react.production.min.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./cjs/react.development.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>🚀此时，真正有效的代码被包含在 <code>react.development.js</code>（或 <code>react.production.min.js</code>）中，但 Webpack 只会打包这段 <code>index.js</code> 内容，也就造成了产物中实际上并没有真正包含 React。针对这个问题，我们可以先找到适用的代码文件，然后用 <a href="https://webpack.docschina.org/configuration/resolve/#resolvealias" target="_blank" rel="noreferrer">resolve.alias</a> 配置项重定向到该文件：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-5Zax_" id="tab-zLjCTXG" checked="checked"><label for="tab-zLjCTXG">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">noParse</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">lodash</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">react</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        __dirname</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./node_modules/react/cjs</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      )</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>使用 <a href="./18.html#使用外置依赖">externals</a> 也能将部分依赖放到构建体系之外，实现与 <code>noParse</code> 类似的效果，详情可查阅<a href="https://webpack.docschina.org/configuration/externals/" target="_blank" rel="noreferrer">externals - webpack doc</a>。</p></div><h2 id="开发模式禁用产物优化" tabindex="-1">开发模式禁用产物优化 <a class="header-anchor" href="#开发模式禁用产物优化" aria-label="Permalink to &quot;开发模式禁用产物优化&quot;">​</a></h2><p>Webpack 提供了许多产物优化功能，例如：Tree-Shaking、SplitChunks、Minimizer 等，这些能力能够有效减少最终产物的尺寸，提升生产环境下的运行性能，但这些优化在开发环境中意义不大，反而会增加构建器的负担(都是性能大户)。</p><p>因此，开发模式下建议关闭这一类优化功能，具体措施：</p><ul><li>确保 <code>mode=&#39;development&#39;</code> 或 <code>mode = &#39;none&#39;</code>，关闭默认优化策略；</li><li><code>optimization.minimize</code> 保持默认值或 <code>false</code>，关闭代码压缩；</li><li><code>optimization.concatenateModules</code> 保持默认值或 <code>false</code>，关闭模块合并；</li><li><code>optimization.splitChunks</code> 保持默认值或 <code>false</code>，关闭代码分包；</li><li><code>optimization.usedExports</code> 保持默认值或 <code>false</code>，关闭 Tree-shaking 功能；</li></ul><p>最终，建议开发环境配置如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">removeAvailableModules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">removeEmptyChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">minimize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">concatenateModules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">usedExports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="最小化-watch-监控范围" tabindex="-1">最小化 <code>watch</code> 监控范围 <a class="header-anchor" href="#最小化-watch-监控范围" aria-label="Permalink to &quot;最小化 \`watch\` 监控范围&quot;">​</a></h2><p>在 <code>watch</code> 模式下（通过 <code>npx webpack --watch</code> 命令启动），Webpack 会持续监听项目目录中所有代码文件，发生变化时执行 <code>rebuild</code> 命令。</p><p>不过，通常情况下前端项目中部分资源并不会频繁更新，例如 <code>node_modules</code> ，此时可以设置 <code>watchOptions.ignored</code> 属性忽略这些文件，例如：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-scz5J" id="tab-H2i20Yo" checked="checked"><label for="tab-H2i20Yo">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watchOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">ignored</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><h2 id="跳过-ts-类型检查" tabindex="-1">跳过 TS 类型检查 <a class="header-anchor" href="#跳过-ts-类型检查" aria-label="Permalink to &quot;跳过 TS 类型检查&quot;">​</a></h2><p>JavaScript 本身是一门弱类型语言，这在多人协作项目中经常会引起一些不必要的类型错误，影响开发效率。随前端能力与职能范围的不断扩展，前端项目的复杂性与协作难度也在不断上升，TypeScript 所提供的静态类型检查能力也就被越来越多人所采纳。</p><p>不过，类型检查涉及 AST 解析、遍历以及其它非常消耗 CPU 的操作，会给工程化流程带来比较大的性能负担，因此我们可以选择关闭 <code>ts-loader</code> 的类型检查功能：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-cX_24" id="tab-aMysbGV" checked="checked"><label for="tab-aMysbGV">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ts-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">// 设置为“仅编译”，关闭类型检查</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">transpileOnly</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        ]</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>有同学可能会问：“没有类型检查，那还用 TypeScript 干嘛？”，很简单，我们可以：</p><ol><li>可以借助编辑器的 TypeScript 插件实现代码检查；</li><li>使用 <code>fork-ts-checker-webpack-plugin</code> 插件将类型检查能力剥离到 <strong>子进程</strong> 执行，例如：</li></ol><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-egLYp" id="tab-ceTCEeC" checked="checked"><label for="tab-ceTCEeC">webpack.config.js</label></div><div class="blocks"><div class="language-js active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ForkTsCheckerWebpackPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fork-ts-checker-webpack-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">ts</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ts-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">// 设置为“仅编译”，关闭类型检查</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">transpileOnly</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        ]</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line diff add"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[ </span></span>
<span class="line diff add"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// fork 出子进程，专门用于执行类型检查 </span></span>
<span class="line diff add"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ForkTsCheckerWebpackPlugin</span><span style="color:#A6ACCD;">() </span></span>
<span class="line diff add"><span style="color:#A6ACCD;">  ] </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>这样，既可以获得 Typescript 静态类型检查能力，又能提升整体编译速度。</p><h2 id="优化-eslint-性能" tabindex="-1">优化 ESLint 性能 <a class="header-anchor" href="#优化-eslint-性能" aria-label="Permalink to &quot;优化 ESLint 性能&quot;">​</a></h2><p>ESLint 能帮助我们极低成本发现代码风格问题，维护代码质量，但若使用不当 —— 例如在开发模式下使用 <code>eslint-loader</code> 实现实时代码检查，会带来比较高昂且不必要的性能成本，我们可以选择其它更聪明的方式接入 ESLint。</p><p>例如，使用新版本组件 <a href="https://www.npmjs.com/package/eslint-webpack-plugin" target="_blank" rel="noreferrer">eslint-webpack-plugin</a> 替代旧版 <code>eslint-loader</code>，两者差异在于，<code>eslint-webpack-plugin</code> 在模块构建完毕（<code>compilation.hooks.succeedModule</code> 钩子）后执行检查，不会阻断文件加载流程，性能更优，用法：</p><ul><li><p>安装依赖</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">eslint-webpack-plugin</span></span></code></pre></div></li><li><p>添加插件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ESLintPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">eslint-webpack-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESLintPlugin</span><span style="color:#A6ACCD;">(options)]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div></li></ul><p>或者，可以选择在特定条件、场景下执行 ESLint，减少对构建流程的影响，如：</p><ul><li>使用编辑器插件完成 ESLint 检查、错误提示、自动 Fix，如 VS Code 的 <a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noreferrer">dbaeumer.vscode-eslint</a> 插件；</li><li>使用 <code>husky</code>，仅在代码提交前执行 ESLint 代码检查；</li><li>仅在 <code>production</code> 构建中使用 ESLint，能够有效提高开发阶段的构建效率。</li></ul><h2 id="慎用-source-map" tabindex="-1">慎用 <code>source-map</code> <a class="header-anchor" href="#慎用-source-map" aria-label="Permalink to &quot;慎用 \`source-map\`&quot;">​</a></h2><p><code>source-map</code> 是一种将经过编译、压缩、混淆的代码映射回源码的技术，它能够帮助开发者迅速定位到更有意义、更结构化的源码中，方便调试。不过，<code>source-map</code> 操作本身也有很大构建性能开销，建议读者根据实际场景慎重选择最合适的 <code>source-map</code> 方案。</p><p>针对 <code>source-map</code> 功能，Webpack 提供了 <a href="https://webpack.docschina.org/configuration/devtool/" target="_blank" rel="noreferrer">devtool</a> 选项，可以配置 <code>eval</code>、<code>source-map</code>、<code>cheap-source-map</code> 等值，不考虑其它因素的情况下，最佳实践：</p><ul><li>开发环境使用 <code>eval</code> ，确保最佳编译速度；</li><li>生产环境使用 <code>source-map</code>，获取最高质量。</li></ul><h3 id="⭐sourcemap的选择-译者备注" tabindex="-1">⭐sourcemap的选择 - 译者备注 <a class="header-anchor" href="#⭐sourcemap的选择-译者备注" aria-label="Permalink to &quot;⭐sourcemap的选择 - 译者备注&quot;">​</a></h3><p>sourcemap可能配置选项如下：</p><p><img src="`+o+`" alt="webpack sourcemap"></p><p>不同于小册作者的想法：</p><ul><li>开发环境使用 <code>cheap-module-eval-source-map</code> 确保经过各种loaders转换之后的代码与源文件对应上</li><li>生产环境使用 <code>none</code> 或者 <code>nosources-source-map</code></li></ul><p>关于sourcemap可以看：</p><ul><li><a href="https://www.bilibili.com/video/BV1kP41177wp?p=48&amp;vd_source=1b80f8e85d6b313a57c6e37edadd9d91" target="_blank" rel="noreferrer">汪磊webpack devtools - @bilibili</a></li></ul><h2 id="设置-resolve-缩小搜索范围" tabindex="-1">设置 <code>resolve</code> 缩小搜索范围 <a class="header-anchor" href="#设置-resolve-缩小搜索范围" aria-label="Permalink to &quot;设置 \`resolve\` 缩小搜索范围&quot;">​</a></h2><p>Webpack 默认提供了一套同时兼容 CMD、AMD、ESM 等模块化方案的资源搜索规则 —— <code>enhanced-resolve</code>，它能将各种模块导入语句准确定位到模块对应的物理资源路径。例如：</p><ul><li><code>import &#39;lodash&#39;</code> 这一类引入 NPM 包的语句会被 <code>enhanced-resolve</code> 定位到对应包体文件路径 <code>node_modules/lodash/index.js</code> ；</li><li><code>import &#39;./a&#39;</code> 这类不带文件后缀名的语句，则可能被定位到 <code>./a.js</code> 文件；</li><li><code>import &#39;@/a&#39;</code> 这类化名路径的引用，则可能被定位到 <code>$PROJECT_ROOT/src/a.js</code> 文件。</li></ul><p>需要注意，这类增强资源搜索体验的特性背后涉及许多 IO 操作，本身可能引起较大的性能消耗，开发者可根据实际情况调整 <a href="https://webpack.docschina.org/configuration/resolve/" target="_blank" rel="noreferrer">resolve</a> 配置，缩小资源搜索范围，包括：</p><h3 id="resolve-extensions配置" tabindex="-1">resolve.extensions配置 <a class="header-anchor" href="#resolve-extensions配置" aria-label="Permalink to &quot;resolve.extensions配置&quot;">​</a></h3><p>例如，当模块导入语句未携带文件后缀时，如 <code>import &#39;./a&#39;</code> ，Webpack 会遍历 <code>resolve.extensions</code> 项定义的后缀名列表，尝试在 <code>&#39;./a&#39;</code> 路径追加后缀名，搜索对应物理文件。</p><p>📚在 Webpack5 中，<code>resolve.extensions</code> 默认值为 <code>[&#39;.js&#39;, &#39;.json&#39;, &#39;.wasm&#39;]</code> ，这意味着 Webpack 在针对不带后缀名的引入语句时，可能需要执行三次判断逻辑才能完成文件搜索，针对这种情况，可行的优化措施包括：</p><ul><li>修改 <code>resolve.extensions</code> 配置项，减少匹配次数；</li><li>代码中尽量补齐文件后缀名；</li><li>设置 <code>resolve.enforceExtension = true</code> ，强制要求开发者提供明确的模块后缀名，不过这种做法侵入性太强，不太推荐。</li></ul><h3 id="resolve-modules配置" tabindex="-1">resolve.modules配置 <a class="header-anchor" href="#resolve-modules配置" aria-label="Permalink to &quot;resolve.modules配置&quot;">​</a></h3><p>类似于 Node 模块搜索逻辑，当 Webpack 遇到 <code>import &#39;lodash&#39;</code> 这样的 npm 包导入语句时，会先尝试在当前项目 <code>node_modules</code> 目录搜索资源，如果找不到，则按目录层级尝试逐级向上查找 <code>node_modules</code> 目录，如果依然找不到，则最终尝试在全局 <code>node_modules</code> 中搜索。</p><p>在一个依赖管理良好的系统中，我们通常会尽量将 NPM 包安装在有限层级内，因此 Webpack 这一逐层查找的逻辑大多数情况下实用性并不高，开发者可以通过修改 <code>resolve.modules</code> 配置项，主动关闭逐层搜索功能😎，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">modules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="resolve-mainfiles配置" tabindex="-1">resolve.mainFiles配置 <a class="header-anchor" href="#resolve-mainfiles配置" aria-label="Permalink to &quot;resolve.mainFiles配置&quot;">​</a></h3><p>与 <code>resolve.extensions</code> 类似，<code>resolve.mainFiles</code> 配置项用于定义文件夹默认文件名，例如对于 <code>import &#39;./dir&#39;</code> 请求，假设 <code>resolve.mainFiles = [&#39;index&#39;, &#39;home&#39;]</code> ，Webpack 会按依次测试 <code>./dir/index</code> 与 <code>./dir/home</code> 文件是否存在。</p><p>因此，实际项目中应控制 <code>resolve.mainFiles</code> 数组数量，减少匹配次数。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Webpack 在应对大型项目场景时通常会面临比较大的性能挑战，也因此非常值得我们投入精力去学习如何分析、优化构建性能，除了缓存、多进程构建这一类大杀器之外，还可以通过控制构建范围、能力等方式尽可能减少各个环节的耗时，包括文中介绍的：</p><ul><li>使用最新 Webpack、Node 版本；</li><li>约束 Loader 执行范围；</li><li>使用 <code>noParse</code> 跳过文件编译等。</li></ul><p>如果下次再遇到性能问题，建议可以先试着分析哪些环节占用时长更多，然后有针对性的实施各项优化。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>除了上述各项优化外，还存在哪些有效措施？可以往 Webpack 的构建流程、组件等方向思考。</p><details class="details custom-block"><summary>chatgpt回答</summary><p>Webpack 可以通过一些优化措施来提高构建速度和性能，以下是一些常见的优化措施：</p><ol><li><strong>减少文件搜索范围</strong></li></ol><p>Webpack 在构建过程中需要搜索项目中所有依赖的文件，这个过程会比较耗时。可以通过配置 <code>resolve.modules</code> 和 <code>resolve.extensions</code> 来缩小搜索范围，加快构建速度。</p><ol start="2"><li><strong>使用 DllPlugin 和 DllReferencePlugin</strong></li></ol><p>DllPlugin 和 DllReferencePlugin 是两个用于拆分和预编译公共模块的插件。将一些常用的库（如 React、lodash 等）打包成单独的 DLL 文件后，在每次重新构建应用程序时，只需要加载 DLL 文件，而不需要重复编译公共模块，可以极大地提高构建速度。</p><ol start="3"><li><strong>利用缓存</strong></li></ol><p>Webpack 的缓存可以减少重复构建，提高构建速度。可以使用webpack5中的 <a href="./13.html">cache</a> 功能</p><ol start="4"><li><strong>使用 HappyPack</strong></li></ol><p>HappyPack 是一个多线程构建工具，可以将 loader 的执行过程放在多个子进程中进行，从而提高构建速度。</p><ol start="5"><li><strong>利用 Tree-Shaking</strong></li></ol><p>Tree-Shaking 是 Webpack 4 中新增的特性，可以将未被使用的代码从最终打包的文件中剔除掉，从而减少文件大小和加载时间。</p><ol start="6"><li><strong>代码分离</strong></li></ol><p>Webpack 支持将代码拆分成多个 chunk，在需要时动态加载。可以使用 <a href="./16.html">SplitChunksPlugin</a> 来实现代码的拆分，从而加快页面的加载速度。</p><ol start="7"><li><strong>压缩文件</strong></li></ol><p>使用 UglifyJsPlugin 和 OptimizeCSSAssetsPlugin 等插件可以对 JavaScript 和 CSS 文件进行压缩，减少文件大小，提高加载速度。</p><p>总的来说，以上优化措施都可以在不同程度上提高 Webpack 的构建速度和性能。需要根据具体项目的需求选择相应的优化方案。</p></details><p>2023-04-17 11:52:58</p>`,97),c=[p];function t(r,i,D,y,d,F){return n(),a("div",null,c)}const u=s(e,[["render",t]]);export{A as __pageData,u as default};
