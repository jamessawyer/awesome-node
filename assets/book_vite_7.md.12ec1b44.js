import{_ as s,c as a,o as n,N as l}from"./chunks/framework.7812daa2.js";const p="/awesome-node/assets/7-1.2add88b3.webp",o="/awesome-node/assets/7-2.fcdf34f8.webp",e="/awesome-node/assets/7-3.6c7f7510.webp",t="/awesome-node/assets/7-4.a72cce8a.webp",c="/awesome-node/assets/7-5.5a07ac9e.webp",r="/awesome-node/assets/7-6.16082e52.webp",i="/awesome-node/assets/7-7.39b4014c.webp",D="/awesome-node/assets/7-8.fa70dcc0.webp",F="/awesome-node/assets/7-9.7c7d0ec3.webp",y="/awesome-node/assets/7-10.1ea3ef71.webp",E=JSON.parse('{"title":"预构建","description":"","frontmatter":{"title":"预构建"},"headers":[],"relativePath":"book/vite/7.md","lastUpdated":1680857505000}'),d={name:"book/vite/7.md"},C=l('<h2 id="预构建-如何玩转秒级依赖预构建的能力" tabindex="-1">预构建: 如何玩转秒级依赖预构建的能力？ <a class="header-anchor" href="#预构建-如何玩转秒级依赖预构建的能力" aria-label="Permalink to &quot;预构建: 如何玩转秒级依赖预构建的能力？&quot;">​</a></h2><p>大家都知道， Vite 是一个提倡 <code>no-bundle</code> 的构建工具，相比于传统的 Webpack，能做到开发时的模块按需编译，而不用先打包完再加载。这一点我们在<code>快速上手</code>这一节已经具体地分析过了。</p><p>需要注意的是，我们所说的模块代码其实分为两部分，一部分是源代码，也就是业务代码，另一部分是第三方依赖的代码，即<code>node_modules</code>中的代码。所谓的<code>no-bundle</code><strong>只是对于源代码而言</strong>，对于第三方依赖而言，Vite 还是选择 bundle(打包)，并且使用速度极快的打包器 Esbuild 来完成这一过程，达到秒级的依赖编译速度。</p><p>这一小节，我将带你一起熟悉 Vite 的预构建功能，深入体会各个配置的应用场景和使用姿势，学会在实战中驾驭预构建的能力。</p><h2 id="为什么需要预构建" tabindex="-1">为什么需要预构建? <a class="header-anchor" href="#为什么需要预构建" aria-label="Permalink to &quot;为什么需要预构建?&quot;">​</a></h2><p>在介绍使用姿势之前，我想先问你一个问题：为什么在开发阶段我们要对第三方依赖进行预构建? 如果不进行预构建会怎么样？</p><p>首先 Vite 是基于浏览器原生 ES 模块规范实现的 Dev Server，不论是应用代码，还是第三方依赖的代码，理应符合 ESM 规范才能够正常运行。</p><p><img src="'+p+`" alt="ESM"></p><p>但可惜，我们没有办法控制第三方的打包规范。就目前来看，还有相当多的第三方库仍然没有 ES 版本的产物，比如大名鼎鼎的 <code>react</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// react 入口文件</span></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// 😅只有 CommonJS 格式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NODE_ENV </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./cjs/react.production.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.exports</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">require</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./cjs/react.development.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这种 CommonJS 格式的代码在 Vite 当中无法直接运行，我们需要将它转换成 ESM 格式的产物。</p><p>此外，还有一个比较重要的问题——<strong>请求瀑布流问题</strong>。比如说，知名的<code>loadsh-es</code>库本身是有 ES 版本产物的，可以在 Vite 中直接运行。但实际上，它在加载时会发出特别多的请求，导致页面加载的前几秒几都乎处于卡顿状态，拿一个简单的 demo 项目举例，请求情况如下图所示:</p><p><img src="`+o+'" alt="waterfull requests"></p><p>我在应用代码中调用了<code>debounce</code>方法，这个方法会依赖很多工具函数，如下图所示:</p><p><img src="'+e+'" alt="lodash debounce"></p><p>每个<code>import</code>都会触发一次新的文件请求，因此在这种<code>依赖层级深</code>、<code>涉及模块数量多</code>的情况下，会触发成百上千个网络请求，巨大的请求量加上 Chrome 对同一个域名下只能同时支持 <code>6</code> 个 HTTP 并发请求的限制，导致页面加载十分缓慢，与 Vite 主导性能优势的初衷背道而驰。不过，在进行<strong>依赖的预构建</strong>之后，<code>lodash-es</code>这个库的代码被打包成了一个文件，这样请求的数量会骤然减少，页面加载也快了许多。下图是进行预构建之后的请求情况，你可以对照看看:</p><p><img src="'+t+'" alt="预构建的作用"></p><p>总之，依赖预构建主要做了两件事情：</p><ol><li>将其他格式(如 UMD 和 CommonJS)的产物转换为 ESM 格式，使其在浏览器通过 <code>&lt;script type=&quot;module&quot;&gt;&lt;script&gt;</code>的方式正常加载。</li><li>打包第三方库的代码，将各个第三方库分散的文件合并到一起，减少 HTTP 请求数量，避免页面加载性能劣化。</li></ol><p>而这两件事情全部由性能优异的 <code>Esbuild</code> (基于 Golang 开发)完成，而不是传统的 Webpack/Rollup，所以也不会有明显的打包性能问题，反而是 Vite 项目启动飞快(秒级启动)的一个核心原因。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ps: Vite 1.x 使用了 Rollup 来进行依赖预构建，在 2.x 版本将 Rollup 换成了 Esbuild，编译速度提升了<a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">近 100 倍</a>！</p></div><h2 id="如何开启预构建" tabindex="-1">如何开启预构建？ <a class="header-anchor" href="#如何开启预构建" aria-label="Permalink to &quot;如何开启预构建？&quot;">​</a></h2><p>在 Vite 中有两种开启预构建的方式，分别是<code>自动开启</code>和<code>手动开启</code>。</p><h3 id="自动开启" tabindex="-1">自动开启 <a class="header-anchor" href="#自动开启" aria-label="Permalink to &quot;自动开启&quot;">​</a></h3><p>首先是<code>自动开启</code>。当我们在第一次启动项目的时候，可以在命令行窗口看见如下的信息:</p><p><img src="'+c+'" alt="prebundle bash"></p><p>同时，在项目启动成功后，你可以在根目录下的<code>node_modules</code>中发现<code>.vite/deps</code>目录，这就是预构建产物文件存放的目录，内容如下:</p><p><img src="'+r+`" alt="预构建缓存"></p><p>在浏览器访问页面后，打开 <code>Dev Tools</code> 中的网络调试面板，你可以发现第三方包的引入路径已经被重写:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">jsxDEV</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/@id/__x00__react/jsx-dev-runtime</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> __vite__cjsImport1_react </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/node_modules/.vite/deps/react.js?v=c9cc7c9e</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> __vite__cjsImport1_react</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__esModule </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> __vite__cjsImport1_react</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __vite__cjsImport1_react</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> __vite__cjsImport2_reactDom_client </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/node_modules/.vite/deps/react-dom_client.js?v=ab9c2130</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ReactDOM </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> __vite__cjsImport2_reactDom_client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__esModule </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> __vite__cjsImport2_reactDom_client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __vite__cjsImport2_reactDom_client</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> App </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/src/App.tsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/src/index.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>并且对于依赖的请求结果，Vite 的 Dev Server 会设置强缓存:</p><p><img src="`+i+`" alt="依赖强缓存"></p><p>缓存过期时间被设置为一年，表示缓存过期前浏览器对 react 预构建产物的请求不会再经过 Vite Dev Server，直接用缓存结果。</p><p>当然，除了 HTTP 缓存，Vite 还设置了本地文件系统的缓存，所有的预构建产物默认缓存在<code>node_modules/.vite/deps</code>目录中。如果以下 3 个地方都没有改动，Vite 将一直使用缓存文件:</p><ol><li>package.json 的 <code>dependencies</code> 字段</li><li>各种包管理器的 lock 文件</li><li><a href="https://cn.vitejs.dev/config/dep-optimization-options.html" target="_blank" rel="noreferrer">optimizeDeps</a> 配置内容</li></ol><h3 id="手动开启" tabindex="-1">手动开启 <a class="header-anchor" href="#手动开启" aria-label="Permalink to &quot;手动开启&quot;">​</a></h3><p>上面提到了预构建中本地文件系统的产物缓存机制，而少数场景下我们不希望用本地的缓存文件，比如需要调试某个包的预构建结果，我推荐使用下面任意一种方法清除缓存，还有手动开启预构建:</p><ol><li>删除<code>node_modules/.vite</code>目录。</li><li>在 Vite 配置文件中，将<code>server.force</code>设为<code>true</code>。</li><li>命令行执行<code>npx vite --force</code>或者<code>npx vite optimize</code>。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Vite 项目的启动可以分为两步，第一步是依赖预构建，第二步才是 Dev Server 的启动，<code>npx vite optimize</code>相比于其它的方案，仅仅完成第一步的功能。(PS：vite2.9+更改了这个步骤，改成了DevServer和Optimize同时进行🚨)</p></div><h2 id="自定义配置详解" tabindex="-1">自定义配置详解 <a class="header-anchor" href="#自定义配置详解" aria-label="Permalink to &quot;自定义配置详解&quot;">​</a></h2><p>前面说到了如何启动预构建的问题，现在我们来谈谈怎样通过 Vite 提供的配置项来定制预构建的过程。Vite 将预构建相关的配置项都集中在<code>optimizeDeps</code>属性上，我们来一一拆解这些子配置项背后的含义和应用场景。</p><h3 id="入口文件——entries" tabindex="-1">入口文件——entries <a class="header-anchor" href="#入口文件——entries" aria-label="Permalink to &quot;入口文件——entries&quot;">​</a></h3><p>第一个是参数是<code>optimizeDeps.entries</code>，通过这个参数你可以自定义预构建的入口文件。</p><p>实际上，在项目第一次启动时，Vite 会默认抓取项目中所有的 HTML 文件（如当前脚手架项目中的<code>index.html</code>），将 HTML 文件作为应用入口，然后根据入口文件扫描出项目中用到的第三方依赖，最后对这些依赖逐个进行编译。</p><p>那么，当默认扫描 HTML 文件的行为无法满足需求的时候，比如项目入口为<code>vue</code>格式文件时，你可以通过 entries 参数来配置:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-dRSCo" id="tab--wU5eKY" checked="checked"><label for="tab--wU5eKY">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 为一个字符串数组</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">entries</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/main.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>当然，entries 配置也支持 <a href="https://github.com/mrmlnc/fast-glob" target="_blank" rel="noreferrer">glob 语法</a>，非常灵活，如:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将所有的 .vue 文件作为扫描入口</span></span>
<span class="line"><span style="color:#FFCB6B;">entries</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">**/*.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="添加一些依赖——include" tabindex="-1">添加一些依赖——include <a class="header-anchor" href="#添加一些依赖——include" aria-label="Permalink to &quot;添加一些依赖——include&quot;">​</a></h3><p>除了 <code>entries</code>，<code>include</code> 也是一个很常用的配置，它决定了可以强制预构建的依赖项，使用方式很简单:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-sYgnu" id="tab-brXzIb_" checked="checked"><label for="tab-brXzIb_">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置为一个字符串数组，将 \`lodash-es\` 和 \`vue\`两个包强制进行预构建</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">include</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lodash-es</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>它在使用上并不难，真正难的地方在于，如何找到合适它的使用场景。前文中我们提到，Vite 会根据应用入口(<code>entries</code>)自动搜集依赖，然后进行预构建，这是不是说明 Vite 可以百分百准确地搜集到所有的依赖呢？事实上并不是，某些情况下 Vite 默认的扫描行为并不完全可靠，这就需要联合配置<code>include</code>来达到完美的预构建效果了。接下来，我们好好梳理一下到底有哪些需要配置<code>include</code>的场景。</p><h3 id="场景一-动态-import" tabindex="-1">场景一: 动态 import <a class="header-anchor" href="#场景一-动态-import" aria-label="Permalink to &quot;场景一: 动态 import&quot;">​</a></h3><p>在某些动态 import 的场景下，由于 Vite 天然按需加载的特性，经常会导致某些依赖只能在运行时被识别出来。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/locales/zh_CN.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> objectAssign </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">object-assign</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(objectAssign)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// main.tsx</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> importModule </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./locales/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.ts</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">importModule</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zh_CN</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在这个例子中，动态 import 的路径只有运行时才能确定，无法在预构建阶段被扫描出来。因此，我们在访问项目时控制台会出现下面的日志信息:</p><p><img src="`+D+`" alt="动态import"></p><p>这段 log 的意思是: Vite 运行时发现了新的依赖，随之重新进行依赖预构建，并刷新页面。这个过程也叫 <code>二次预构建</code>。在一些比较复杂的项目中，这个过程会执行很多次，如下面的日志信息所示:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> new dependencies found: @material-ui/icons/Dehaze, @material-ui/core/Box, @material-ui/core/Checkbox, updating...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ✨ dependencies updated, reloading page...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> new dependencies found: @material-ui/core/Dialog, @material-ui/core/DialogActions, updating...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ✨ dependencies updated, reloading page...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> new dependencies found: @material-ui/core/Accordion, @material-ui/core/AccordionSummary, updating...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> ✨ dependencies updated, reloading page...</span></span></code></pre></div><p>然而，二次预构建的成本也比较大。我们不仅需要把预构建的流程重新运行一遍，还得重新刷新页面，并且需要重新请求所有的模块。尤其是在大型项目中，这个过程会严重拖慢应用的加载速度！因此，我们要尽力避免运行时的<strong>二次预构建</strong>。具体怎么做呢？你可以通过<code>include</code>参数提前声明需要按需加载的依赖:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-r2wr0" id="tab-irjGu8o" checked="checked"><label for="tab-irjGu8o">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">include</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 按需加载的依赖都可以声明到这个数组里</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">object-assign</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><h3 id="场景二-某些包被手动-exclude" tabindex="-1">场景二: 某些包被手动 exclude <a class="header-anchor" href="#场景二-某些包被手动-exclude" aria-label="Permalink to &quot;场景二: 某些包被手动 exclude&quot;">​</a></h3><p><code>exclude</code> 是<code>optimizeDeps</code>中的另一个配置项，与<code>include</code>相对，用于将某些依赖从预构建的过程中排除。不过这个配置并不常用，也不推荐大家使用。如果真遇到了要在预构建中排除某个包的情况，需要注意<code>它所依赖的包</code>是否具有 ESM 格式，如下面这个例子:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-wT8DS" id="tab-U9L80xS" checked="checked"><label for="tab-U9L80xS">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@loadable/component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>可以看到浏览器控制台会出现如下的报错:</p><p><img src="`+F+`" alt="optimize error"></p><p>这是为什么呢? 我们刚刚手动 exclude 的包<code>@loadable/component</code>本身具有 ESM 格式的产物，但它的某个依赖<code>hoist-non-react-statics</code>的产物并没有提供 ESM 格式，导致运行时加载失败。</p><p>这个时候<code>include</code>配置就派上用场了，我们可以强制对<code>hoist-non-react-statics</code>这个间接依赖进行预构建:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-Ezdo9" id="tab-VfoYLEv" checked="checked"><label for="tab-VfoYLEv">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">include</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 间接依赖的声明语法，通过\`&gt;\`分开, 如\`a &gt; b\`表示 a 中依赖的 b</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@loadable/component &gt; hoist-non-react-statics</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>在<code>include</code>参数中，我们将所有不具备 ESM 格式产物包都声明一遍，这样再次启动项目就没有问题了。</p><h3 id="自定义-esbuild-行为" tabindex="-1">自定义 Esbuild 行为 <a class="header-anchor" href="#自定义-esbuild-行为" aria-label="Permalink to &quot;自定义 Esbuild 行为&quot;">​</a></h3><p>Vite 提供了<code>esbuildOptions</code> 参数来让我们自定义 Esbuild 本身的配置，常用的场景是加入一些 Esbuild 插件:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-FPXic" id="tab-PgvdRDp" checked="checked"><label for="tab-PgvdRDp">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">esbuildOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 加入 Esbuild 插件</span></span>
<span class="line"><span style="color:#F07178;">      ]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><p>这个配置主要是处理一些特殊情况，如某个第三方包本身的代码出现问题了。接下来，我们就来讨论一下。</p><h2 id="特殊情况-第三方包出现问题怎么办" tabindex="-1">特殊情况: 第三方包出现问题怎么办？ <a class="header-anchor" href="#特殊情况-第三方包出现问题怎么办" aria-label="Permalink to &quot;特殊情况: 第三方包出现问题怎么办？&quot;">​</a></h2><p>由于我们无法保证第三方包的代码质量，在某些情况下我们会遇到莫名的第三方库报错。我举一个常见的案例——<code>react-virtualized</code>库。这个库被许多组件库用到，但它的 ESM 格式产物有明显的问题，在 Vite 进行预构建的时候会直接抛出这个错误：</p><p><img src="`+y+`" alt="第三方包预构建失败"></p><p>原因是这个库的 ES 产物莫名其妙多出了一行无用的代码:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// WindowScroller.js 并没有导出这个模块</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bpfrpt_proptype_WindowScroller</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../WindowScroller.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>其实我们并不需要这行代码，但它却导致 Esbuild 预构建的时候直接报错退出了。那这一类的问题如何解决呢？</p><h3 id="_1-改第三方库代码" tabindex="-1">1. 改第三方库代码 <a class="header-anchor" href="#_1-改第三方库代码" aria-label="Permalink to &quot;1. 改第三方库代码&quot;">​</a></h3><p>首先，我们能想到的思路是<strong>直接修改第三方库的代码</strong>，不过这会带来团队协作的问题，你的改动需要同步到团队所有成员，比较麻烦。</p><p>好在，我们可以使用<a href="https://www.npmjs.com/package/patch-package" target="_blank" rel="noreferrer">patch-package</a>这个库来解决这类问题。一方面，它能记录第三方库代码的改动，另一方面也能将改动同步到团队每个成员。</p><p><code>patch-package</code> 官方只支持 npm 和 yarn，而不支持 pnpm，不过社区中已经提供了支持<code>pnpm</code>的版本，这里我们来安装一下相应的包:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@milahu/patch-package</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意: 要改动的包在 package.json 中必须声明确定的版本，不能有<code>~</code>或者<code>^</code>的前缀。</p></div><p>接着，我们进入第三方库的代码中进行修改，先删掉无用的 import 语句，再在命令行输入:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">patch-package</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">react-virtualized</span></span></code></pre></div><p>现在根目录会多出<code>patches</code>目录记录第三方包内容的更改，随后我们在<code>package.json</code>的<code>scripts</code>中增加如下内容：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 省略其它 script</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">postinstall</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">patch-package</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这样一来，每次安装依赖的时候都会通过 <code>postinstall</code> 脚本自动应用 patches 的修改，解决了团队协作的问题。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>pnpm本身提供了如下命令可以进行patch操作：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">patch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">package_name</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">@</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">package_version</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>修改完成后：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># &lt;path&gt; 是之前提取的临时目录</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">patch-commit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pat</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>参考链接：</p><ul><li><a href="https://pnpm.io/zh/cli/patch" target="_blank" rel="noreferrer">pnpm patch</a></li></ul></div><h3 id="_2-加入-esbuild-插件" tabindex="-1">2. 加入 Esbuild 插件 <a class="header-anchor" href="#_2-加入-esbuild-插件" aria-label="Permalink to &quot;2. 加入 Esbuild 插件&quot;">​</a></h3><p>第二种方式是通过 Esbuild 插件修改指定模块的内容，这里我给大家展示一下新增的配置内容:</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>关于 Esbuild 插件的实现细节，大家不用深究，我们将在<strong>底层双引擎</strong>的部分给大家展开介绍</p></div><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-dpo4F" id="tab-hQNgGJr" checked="checked"><label for="tab-hQNgGJr">vite.config.ts</label></div><div class="blocks"><div class="language-typescript active"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> esbuildPatchPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-virtualized-patch</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">build</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onLoad</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        filter</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">react-virtualized</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">es</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">WindowScroller</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">utils</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">onScroll.js</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">promises</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          contents</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">import { bpfrpt_proptype_WindowScroller } from &quot;../WindowScroller.js&quot;;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#F07178;">          )</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 插件加入 Vite 预构建配置</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">esbuildOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">esbuildPatchPlugin</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>好，本节的内容到这里就接近尾声了。在这一节，你需要重点掌握 <strong>Vite 预构建技术的作用</strong>和<strong>预构建相关配置的使用</strong>。</p><p>Vite 中的依赖预构建技术主要解决了 2 个问题，即模块格式兼容问题和海量模块请求的问题。而 Vite 中开启预构建有 2 种方式，并梳理了预构建产物的缓存策略，推荐了一些手动清除缓存的方法。</p><p>接着，我们正式学习了预构建的相关配置——<code>entries</code>、<code>include</code>、<code>exclude</code>和<code>esbuldOptions</code>，并且重点介绍了<code>include</code>配置的各种使用场景和使用姿势。最后，我们讨论了一类特殊情况，即第三方包出现了问题该怎么办，分别给你介绍了两个解决思路: 通过<code>patch-package</code>修改库代码和编写 <code>Esbuild 插件</code>修改模块加载的内容。</p><p>本小节的内容覆盖了 Vite 预构建绝大多数的应用场景，相信现在的你已经对预构建有了更深入的掌握。欢迎在评论区把自己在使用预构建时踩过的坑分享出来，跟大家一起讨论，也欢迎大家集思广益，分享更多的解决思路。感谢你的阅读，我们下一节再见！</p><p>2023年02月13日14:21:05</p>`,102),u=[C];function A(h,m,b,g,v,_){return n(),a("div",null,u)}const k=s(d,[["render",A]]);export{E as __pageData,k as default};
